<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[クロワッサンは黒くない]]></title>
  <subtitle><![CDATA[とある高専生の備忘録的な何かになるかもしれない]]></subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://wassan128.github.io/blog/"/>
  <updated>2016-06-25T12:14:46.616Z</updated>
  <id>http://wassan128.github.io/blog/</id>
  
  <author>
    <name><![CDATA[wassan128]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[プレゼンへのコメントをリアルタイムにスライドの上に流す話]]></title>
    <link href="http://wassan128.github.io/blog/2016/06/25/"/>
    <id>http://wassan128.github.io/blog/2016/06/25/</id>
    <published>2016-06-25T11:16:02.000Z</published>
    <updated>2016-06-25T12:14:46.616Z</updated>
    <content type="html"><![CDATA[<h2 id="あらすじ">あらすじ</h2><p>夏ですね、暑いですね。世間ではこの時期流しそうめんをやったりするのかもしれませんが、僕は手元にそうめんがないので、別の何かを流していきたいと思います。ということで、今回の記事は、プレゼンへのコメントをリアルタイムでスクリーンに流すツールを作って使ったメモです(某科目の学科紹介プレゼンにて使用)。</p>
<p>プレゼン中にコメントを流すというアイデア自体は、1年か2年の頃に見た弊学での「ちびLT」という勉強会(?)でとある先輩が開発・紹介していたものが元なので、オリジナルではないですが、自分でも作ってみたくなったのでやってみました。しかし、当時の先輩がどのように作ったのかわからなかったので、とりあえずいろいろ調べたり考えてやってみたので、その過程をメモします。ちなみに最終的にはComet(Python, JavaScript) on Adobe Airで良い感じにやりました。</p>
<a id="more"></a>
<h2 id="開発が始まるまでの流れ">開発が始まるまでの流れ</h2><p>くどいようですが、やりたいことは「PowerPointプレゼンテーションのスライド上を、聴衆のコメントが流れていく」ということです。したがって、</p>
<ol>
<li>聴衆がコメントを打ち込む画面</li>
<li>コメントを画面上に流す何らかの仕組み</li>
</ol>
<p>の2つが必要になります。1については、ひとまず適当なwebアプリのページを作って、URLを黒板かスライドにでも書いてアクセスしてもらい、コメントを打ってもらえば良いか、という感じで後回しにし、2の方に先にとりかかりました。思いついた当初はだいぶ楽観的で、<br>「まあ、PowerPointだし、Excelみたいにマクロあるっしょ(おもむろにAlt + F11を押す)。ほらVBA書けるやん、良い感じにDOMのデータ取ってきてテキストオブジェクト作ってアニメーション当てれば行けるっしょ～」<br>と考えていた時期が僕にもありますた。実際、VBAではInternetExplorerを起動してDOMの操作もでき、さらにreadyState(サイトのロードステータス)を扱った処理もできるようでした(※1)。また、検索の途中で面白そうな資料も発見しました(※2、いつかVBAやらないといけなくなった時にまた見たい)。</p>
<h2 id="でもやっぱり?">でもやっぱり?</h2><p>そうはいってもreadyStateはブラウザによって実装のされ方が違うらしく、その影響なのかVBAから使う際の良さみが浅い感じでした。また、開発期間もあまり長くない状況で使い慣れない言語を使うよりは”い つ も の”でどうにかしたい気持ちが強くなり、その方向へ転換してグーグリングを継続しました。というかPowerPoint VBAとExcel VBAで若干言語仕様が違って、PPT VBAの資料が圧倒的に少ないのがだいぶ辛かったです。さて、ここからようやく開発本編です(僕の記事は前置きというか無駄話が長いことであまりにも有名)。</p>
<h2 id="い_つ_も_の">い つ も の</h2><p>やっぱりWebベースで全部やりたくなるんですよ。その願いを叶えてくれたのが、「<strong>Adobe Air</strong>」でした。恥ずかしながら存在自体を今回の開発時まで知らず、「へーこんなのあるんだー」「Flashと何が違うんや…」「でもActionScriptで開発しないといけないんじゃないの…？」などいろいろ疑問がありました。実際はAir SDKをダウンロードすることで「HTML + JavaScript」で開発ができるので、VBAの沼にはまりかけた時に比べればだいぶ気は楽でした。後はやるだけ。<br>ただ当初WebSocketで通信できないかなと思ってたんですが、AirではWebSocketがサポートされておらず、独自のSocketAPIが…(※3)とあったので、今回はSocketを捨てて「Comet」方式で実装することにしました(逃げ)。以下の図は全体のイメージをまとめたものです。Cometでファイルの変更を監視し、変更差分を画面に投げます。</p>
<img src="/blog/2016/06/25/system_image.png" alt="ユーザーからのインプットが画面を流れるまで" title="ユーザーからのインプットが画面を流れるまで">
<h2 id="開発環境">開発環境</h2><p>OS: Windows7<br>言語: Python(2.7.11) + JavaScript(jquery(v1.12.4))</p>
<h2 id="核となるコードを書く">核となるコードを書く</h2><p>PHP+JSでのCometの実装(※4)を参考に、ファイルの差分をJSONで返すPythonのコード(こんなのしか思いつかなかったのでもっと良い書き方あったら教えて下さい)。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prevLines = <span class="function"><span class="title">int</span><span class="params">(form[<span class="string">"prev"</span>].value)</span></span></span><br><span class="line">while True:</span><br><span class="line">	nowLines = <span class="function"><span class="title">sum</span><span class="params">(<span class="number">1</span> for line in open(LOGFILE)</span></span>)</span><br><span class="line">	<span class="keyword">if</span> prevLines != nowLines:</span><br><span class="line">		ret = []</span><br><span class="line">		<span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">0</span>, nowLines - prevLines)</span></span>:</span><br><span class="line">			ret.<span class="function"><span class="title">append</span><span class="params">(linecache.getline(LOGFILE, nowLines - i)</span></span>)</span><br><span class="line">		break</span><br><span class="line">	<span class="tag">time</span>.<span class="function"><span class="title">sleep</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"></span><br><span class="line">linecache.<span class="function"><span class="title">clearcache</span><span class="params">()</span></span></span><br><span class="line">print json.<span class="function"><span class="title">dumps</span><span class="params">(&#123;<span class="string">"ret"</span>: ret, <span class="string">"prev"</span>: nowLines&#125;)</span></span></span><br></pre></td></tr></table></figure></p>
<p>と、それを投げたり良い感じにするJS側のコード。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstFlag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> prev = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cometCheck</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">		url: <span class="string">"./cgi/comet.py?prev="</span> + prev,</span><br><span class="line">		type: <span class="string">"get"</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">		prev = json.prev;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//起動時にもログが読み込まれてくるが、それは表示しない</span></span><br><span class="line">		<span class="keyword">if</span> (firstFlag) &#123;</span><br><span class="line">			firstFlag = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; (json.ret).length; i++) &#123;</span><br><span class="line">				nicoscreen.add(json.ret[i], <span class="string">"white"</span>, <span class="string">"48pt"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">//do something</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		cometCheck();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>JSコード中のnicoscreen関数ですが、これはニコニココメント風に画面に文字を流すプログラム(※5)があったので拝借し、少し中身を改造して使わせていただきました。以下動作確認時のスクリーンショットです(左側が入力用のユーザーが見るページ、右側が拡張ディスプレイに表示したPowerPointスライドと、その上を流れるコメント)。</p>
<img src="/blog/2016/06/25/test.png" alt="実際に使った入力画面からのコメントが、画面を流れる様子を確認" title="実際に使った入力画面からのコメントが、画面を流れる様子を確認">
<h2 id="なにもないところを文字が流れているように見えるんだけど…？">なにもないところを文字が流れているように見えるんだけど…？</h2><p>これについてはAdobe Airの力でして、Airのアプリを書く際はまずxmlを書くんですが、その中でウィンドウを透明にしたり、フルスクリーンモードをオンにしたりなど設定ができます。また、詳しくはHTML + JavaScript開発者用ドキュメント(※6)を読めばわかりますが、簡潔に言うとSDKにJSを拡張するJSが入っていて、そいつを読み込んでAir JSなコードを少し書くとAirアプリのウィンドウを最前面に配置したりできます。</p>
<h2 id="作ってみての感想など">作ってみての感想など</h2><p>最初からVBAじゃなくてWebの方法にあたりをつければよかった(VBAでしばらくはまり、Webベースに切り替えてから2～3日で作ったので)です。まあでもこんな機会でもなければVBA(ましてやPowerPoint VBA)を触る機会がない(ような気がする)ので良い経験にはなったかな、と思うようにしてます。<br>実際に使ってみて受けが良かったのかは正直よくわかりませんが、コメント書き込んでもらえて良かったです(誰もPC開いてない or コメント書いてくれないケースを想像すると…())。今後このツールを使う機会があるかは謎ですが、同じようなことをしようと考える方の参考に少しでもなれれば幸いです。以上です。</p>
<h2 id="参考にさせていただいたサイト">参考にさせていただいたサイト</h2><p>※1 <a href="http://www.vba-ie.net/" target="_blank" rel="external">VBAのIE制御入門 | IE操作の自動化</a><br>※2 <a href="http://www.slideshare.net/satoshiohya/vba-62341558" target="_blank" rel="external">こじらせVBA - SlideShare</a><br>※3 <a href="http://help.adobe.com/ja_JP/air/html/dev/WSb2ba3b1aad8a27b0-67c0013e126afbe6c4d-8000.html" target="_blank" rel="external">Adobe&#160;Flash&#160;Platform * AIR でサポートされていない WebKit の機能</a><br>※4 <a href="http://rewish.jp/blog/tech/php_with_jquery_comet" target="_blank" rel="external">PHPとjQueryでCometっぽいモノを実装する</a><br>※5 <a href="http://labs.r9game.com/nicoscreen/" target="_blank" rel="external">NicoScreen.js：画像や動画の上に、ニコニコ動画のような文字を流すことが出来るjqueryプラグイン</a><br>※6 <a href="http://help.adobe.com/ja_JP/air/html/dev/index.html" target="_blank" rel="external">Adobe Air用HTML開発ガイド</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="あらすじ">あらすじ</h2><p>夏ですね、暑いですね。世間ではこの時期流しそうめんをやったりするのかもしれませんが、僕は手元にそうめんがないので、別の何かを流していきたいと思います。ということで、今回の記事は、プレゼンへのコメントをリアルタイムでスクリーンに流すツールを作って使ったメモです(某科目の学科紹介プレゼンにて使用)。</p>
<p>プレゼン中にコメントを流すというアイデア自体は、1年か2年の頃に見た弊学での「ちびLT」という勉強会(?)でとある先輩が開発・紹介していたものが元なので、オリジナルではないですが、自分でも作ってみたくなったのでやってみました。しかし、当時の先輩がどのように作ったのかわからなかったので、とりあえずいろいろ調べたり考えてやってみたので、その過程をメモします。ちなみに最終的にはComet(Python, JavaScript) on Adobe Airで良い感じにやりました。</p>]]>
    
    </summary>
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ピラミッドに遊びに行ったら野生の10000次正方数列が現れた話]]></title>
    <link href="http://wassan128.github.io/blog/2016/05/22/"/>
    <id>http://wassan128.github.io/blog/2016/05/22/</id>
    <published>2016-05-22T07:54:46.000Z</published>
    <updated>2016-05-22T09:58:56.731Z</updated>
    <content type="html"><![CDATA[<h2 id="概要">概要</h2><p>高校5年生なので、HSCTF(High School CTF)に登録して参加してみました。というのはもちろん嘘で、実際は大学生枠(?)で参加してみたんですが、その中でも「Egyptian Tomb」という問題についてメモしておきたくなったので、ブログに備忘録的に書き残そうかと思いました。<br>ちなみにチーム制CTFで、最終的にはラボの同級生と先輩と僕という感じのチームでした。もっと貢献したかった(´・ω・｀)</p>
<h2 id="問題文の要約">問題文の要約</h2><p>Keithさんという人がいて、エジプトに行きましたと。ピラミッドを見に。するとKeithさんはこんなパズルを見つけたそうです。</p>
<p>$$<br>\begin{pmatrix}<br>1 &amp; 2 \\ 3 &amp; 4<br>\end{pmatrix}<br>$$</p>
<p>このパズルの答えは「20」になるそうです。ほーん。と思ったあなたには良いものを上げましょう(おもむろに$ 10000 \times 10000 $の数列を投げつけられる)。ではどうぞ、解いてください！<br>ざっくりいうとこんな感じです。ここからいろいろ考えたり殴ったりするターンになります。</p>
<a id="more"></a>
<h2 id="このパズルは何か">このパズルは何か</h2><p>このパズルは問題文によると「sum of all sums of subsquares」、つまり$ n \times n $の正方形の中の$ 1 \times 1, \cdots (n - 1) \times (n - 1), n \times n $までの全ての正方形(all subsquares)の中の数字の和を、足したものがパズルの答え、ということだそうです。上の例だと$ 1 \times 1 $の正方形が4つ、$ 2 \times 2 $の正方形が1つなので、</p>
<p>$$<br>1+2+3+4+(1+2+3+4)=20<br>$$</p>
<img src="/blog/2016/05/22/squares.png" alt="2×2の数列内には合計5個の正方形がある" title="2×2の数列内には合計5個の正方形がある">
<p>ということになります。解き方がわかったので、早速$ 10000 \times 10000 $の数列をこの方法で解いてみましょう!ところで、$ 2 \times 2 $の数列内には5個の正方形がありましたが、$ 10000 \times 10000 $だといったいいくつの正方形があるんですかね?$ n \times n $の数列内には</p>
<p>$$<br>\sum_{k=1}^{n}k^2<br>$$</p>
<p>個の正方形があるので、$ n=10000 $では</p>
<p>$$<br>\sum_{k=1}^{10000}k^2=1+2^2+3^2+\cdots+10000^2=333383335000<br>$$</p>
<p>個の正方形があることになります。たったの3000億個か～／(^o^)＼<br>…これを上の式みたいにのんびり解くと大変なことになりそうなので、他の解き方を考えます。</p>
<h2 id="考えてみる">考えてみる</h2><p>上の式を見ると、数列の要素$ \{1, 2, 3, 4\} $がそれぞれ2回ずつたされていることに気づきます。つまり、</p>
<p>$$<br>1\times2+2\times2+3\times2+4\times2=20<br>$$</p>
<p>というように、「{各要素の値} $ \times $ {各要素が足される回数}の総和」で計算できると考えられます。今回問題は$ 10000 \times 10000 $なので、$ n \times n $の$ n $は偶数と考えた上で、各要素が足される回数を要素とした係数数列を考えると、$ 2 \times 2 $の場合は、</p>
<p>$$<br>\begin{pmatrix}<br>2 &amp; 2 \\ 2 &amp; 2<br>\end{pmatrix}<br>$$</p>
<p>となりました。同様に、$ 4 \times 4 $、$ 6 \times 6 $ではそれぞれ</p>
<p>$$<br>\begin{pmatrix}<br>4 &amp; 6 &amp; 6 &amp; 4 \\<br>6 &amp; 10 &amp; 10 &amp; 6 \\<br>6 &amp; 10 &amp; 10 &amp; 6 \\<br>4 &amp; 6 &amp; 6 &amp; 4 \\<br>\end{pmatrix},\quad<br>\begin{pmatrix}<br>6 &amp; 10 &amp; 12 &amp; 12 &amp; 10 &amp; 6 \\<br>10 &amp; 18 &amp; 22 &amp; 22 &amp; 18 &amp; 10 \\<br>12 &amp; 22 &amp; 28 &amp; 28 &amp; 22 &amp; 12 \\<br>12 &amp; 22 &amp; 28 &amp; 28 &amp; 22 &amp; 12 \\<br>10 &amp; 18 &amp; 22 &amp; 22 &amp; 18 &amp; 10 \\<br>6 &amp; 10 &amp; 12 &amp; 12 &amp; 10 &amp; 6 \\<br>\end{pmatrix}<br>$$</p>
<p>が係数数列となります。この値は何か計算をして出したわけではなくて、友人(@koreander2001)と「$ 1 \times 1 $の時は全て1回ずつ足されて、$ 2 \times 2 $の時は$ 1, 2, 2,…, 2, 1 $で…」というように数え上げてそれぞれ何回足されるか書き出してみたものです:-)<br>これを見ると、それぞれ図の赤い三角形部分の数字を求められればどうにか全ての要素を網羅できそうな気がしてきます。実際できるので、これを元に頑張って一般化します。<br><img src="/blog/2016/05/22/matrix_calc.png" alt="係数数列の全ての要素を求める必要はなく、赤い三角形の部分を求めて適用すれば良い" title="係数数列の全ての要素を求める必要はなく、赤い三角形の部分を求めて適用すれば良い"></p>
<p>例えば、$ n=6 $だった場合、$ \frac{n}{2} $ すなわち$ 3 \times 3 $ の、さらに右上三角地帯を計算すれば良く、係数数列の当該部分は<br>$$<br>\begin{Bmatrix}<br>\begin{pmatrix}<br>1 &amp; 1 &amp; 1 \\<br>  &amp; 1 &amp; 1 \\<br>  &amp;   &amp; 1 \\<br>\end{pmatrix}+<br>\begin{pmatrix}<br>1 &amp; 2 &amp; 2 \\<br>  &amp; 4 &amp; 4 \\<br>  &amp;   &amp; 4 \\<br>\end{pmatrix}+<br>\begin{pmatrix}<br>1 &amp; 2 &amp; 3\\<br>  &amp; 4 &amp; 6\\<br>  &amp;   &amp; 9\\<br>\end{pmatrix}<br>\end{Bmatrix}<br>\times2<br>$$</p>
<p>のように分解できます。それぞれ$ 1 \times 1 $、$ 2 \times 2 $、$ 3 \times 3 $数列で足される回数をカウントしたものです。$ \times2 $をする理由は、$ 1 \times 1 $行列の正方形の個数と$ 6 \times 6 $、$ 2 \times 2 $と$ 5 \times 5 $、$ 3 \times 3 $と$ 4 \times 4 $でそれぞれ足し合わせの回数が対応している、すなわち$ 1 \times 1 $～$ 3 \times 3 $で折り返しているので、全体の足し合わせの回数は$ 1 \times 1 $～$ \frac{n}{2} \times \frac{n}{2} $までの和を2倍すると導出できるためです。<br>実際に計算をして、上で示した$ 6 \times 6 $の係数数列の値と対応しているか確認しつつ一般式の立式を目指します。座標$ (m, l) $が$ (1, 1), (2, 1), (3, 1) $のときそれぞれ<br>$$<br>(1, 1) = (1+1+1) \times 2 = 6\\<br>(2, 1) = (1+2+2) \times 2 = 10\\<br>(3, 1) = (1+2+3) \times 2 = 12\\<br>$$<br>となります。同様に$ (2, 2), (3, 2) $では、<br>$$<br>(2, 2) = (1+4+4) \times 2 = 18\\<br>(3, 2) = (1+4+6) \times 2 = 22\\<br>$$<br>となり、$ (3, 3) $では、<br>$$<br>(3, 3) = (1+4+9) \times 2 = 28\\<br>$$<br>が求まります。<br>ここで、$ (3, 3) $の式が<br>$$<br>\sum_{k=1}^{3}k^2<br>$$<br>を含むことに気づきます。各座標にも、部分的に二乗の総和の式が当てはまっています。これらを利用して、例えば$ (m, 2) $での部分的な一般化を試します(実際は$ n=8 $なども試したほうが良い(というか試した)ですが、今回は記事が長くなりすぎるので、割愛します)。<br>$ (m, 2) $においては、$ 1+4 $までは共通しており、3項目で$ 2 \times m $が足されています。$ n=8, n=10 $などを試すとよりはっきりとわかりますが、これは次のような法則に従って足されています。<br>$$<br>(m, 2) = (1+4+6+8+\cdots+2m+\cdots+2m) \times 2<br>$$<br>同様に$ (m, 3) $での部分的な一般化を試すと、<br>$$<br>(m, 3) = (1+4+9+12+15+\cdots+3m+\cdots+3m) \times 3<br>$$<br>という法則が得られます。この式は3つのパートに分けることができ、1つ目のパートが「二乗の和」、2つ目のパートが「mの倍数の和 - 二乗の和との重複部」、3つ目が「$ \frac{n}{2}-m $個の$ l \times m $」です。つまり、$ (m, l) $においては<br>$$<br>(m, l) = \begin{Bmatrix}(1+4+9+\cdots+l^2)+l \times ((1+2+3+\cdots+m) - (1+2+3+\cdots+l))+(\frac{n}{2}- m) \times l \times m\end{Bmatrix} \times 2<br>$$</p>
<p>と表すことができ、これを記号を用いて整理すると、</p>
<p>$$<br>(m, l) = \sum_{i=1}^{l} i^2 + l \times (\sum_{j=1}^{m} j - \sum_{k=1}^{l} k) + lm \times (\frac{n}{2}- m)<br>$$<br>となり、さらにこれを2乗和の公式などを用いて展開して計算すると、</p>
<p>$$<br>(m, l) = \frac{l(l+1)(2l+1)}{6} + l(\frac{m(m+1)}{2} - \frac{l(l+1)}{2}) + lm(\frac{n}{2}-m)\\<br>= \frac{l}{3}((l+1)(2l+1) + 3(m(m+1) - l(l+1)+m(3n-6m))\\<br>= \frac{l}{3}(2l^2+3l+1+3m^2+3m-3l^2-3l+3mn-6m^2)\\<br>= \frac{l}{3}(3mn-l^2-3m^2+3m+1)\\<br>= lm(n-m+1)-\frac{l}{3}(l^2-1)\\<br>\therefore (m, l) = lm(n-m+1)-\frac{l}{3}(l^2-1)\\<br>(ただし、l \leq m)<br>$$</p>
<p>という一般式を得られました。</p>
<h2 id="プログラムにしてみる">プログラムにしてみる</h2><p>今回はPythonで書いてみました。問題の$ 10000 \times 10000 $数列は「egypt.in」というファイルで与えられたので、それを読み込んで計算させます。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">N</span> = 10000</span><br><span class="line">def formula(<span class="keyword">l</span>, <span class="keyword">m</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">l</span> * <span class="keyword">m</span> * (<span class="keyword">N</span> - <span class="keyword">m</span> + 1) - (<span class="keyword">l</span> * (pow(<span class="keyword">l</span>, 2) - 1)) / 3</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">	# load <span class="keyword">input</span> <span class="literal">matrix</span></span><br><span class="line">	data = [item[:-2].<span class="keyword">split</span>(<span class="string">" "</span>) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">open</span>(<span class="string">"egypt.in"</span>, <span class="string">"r"</span>)]</span><br><span class="line">	<span class="keyword">mat</span> = [[int(elm) <span class="keyword">for</span> elm <span class="keyword">in</span> v] <span class="keyword">for</span> v <span class="keyword">in</span> data]</span><br><span class="line"></span><br><span class="line">	# calc value</span><br><span class="line">	<span class="keyword">sum</span> = 0</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(0, <span class="keyword">N</span> / 2):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(i, <span class="keyword">N</span> / 2):</span><br><span class="line">			coef = formula(i + 1, j + 1)</span><br><span class="line">			<span class="keyword">sum</span> += coef * (<span class="keyword">mat</span>[i][j] + <span class="keyword">mat</span>[i][<span class="keyword">N</span> - j - 1] + <span class="keyword">mat</span>[<span class="keyword">N</span> - i - 1][j] + <span class="keyword">mat</span>[<span class="keyword">N</span> - i - 1][<span class="keyword">N</span> - j - 1])</span><br><span class="line">			<span class="keyword">if</span> i != j:</span><br><span class="line">				<span class="keyword">sum</span> += coef * (<span class="keyword">mat</span>[j][i] + <span class="keyword">mat</span>[j][<span class="keyword">N</span> - i - 1] + <span class="keyword">mat</span>[<span class="keyword">N</span> - j - 1][i] + <span class="keyword">mat</span>[<span class="keyword">N</span> - j - 1][<span class="keyword">N</span> - i - 1])</span><br><span class="line"></span><br><span class="line">	# result</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"result: %d"</span> % <span class="literal">sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
<p>3分くらい待って出てきた答えがそのままFLAGでした。<br>この問題はAlgorithm: 300に分類されてました。</p>
<h2 id="感想">感想</h2><ul>
<li>解き方が良いかどうかはさておき、なかなか楽しかった(?)</li>
<li>@koreander2001が神だった(以前にもCTFではない時に共に数学を鈍器にしたことがあり、その時も楽しかったし神だった)</li>
<li>CTFもPythonもまだまだ未熟なので頑張ります</li>
</ul>
<p>以上です。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概要">概要</h2><p>高校5年生なので、HSCTF(High School CTF)に登録して参加してみました。というのはもちろん嘘で、実際は大学生枠(?)で参加してみたんですが、その中でも「Egyptian Tomb」という問題についてメモしておきたくなったので、ブログに備忘録的に書き残そうかと思いました。<br>ちなみにチーム制CTFで、最終的にはラボの同級生と先輩と僕という感じのチームでした。もっと貢献したかった(´・ω・｀)</p>
<h2 id="問題文の要約">問題文の要約</h2><p>Keithさんという人がいて、エジプトに行きましたと。ピラミッドを見に。するとKeithさんはこんなパズルを見つけたそうです。</p>
<p>$$<br>\begin{pmatrix}<br>1 &amp; 2 \\ 3 &amp; 4<br>\end{pmatrix}<br>$$</p>
<p>このパズルの答えは「20」になるそうです。ほーん。と思ったあなたには良いものを上げましょう(おもむろに$ 10000 \times 10000 $の数列を投げつけられる)。ではどうぞ、解いてください！<br>ざっくりいうとこんな感じです。ここからいろいろ考えたり殴ったりするターンになります。</p>]]>
    
    </summary>
    
      <category term="ctf" scheme="http://wassan128.github.io/blog/tags/ctf/"/>
    
      <category term="math" scheme="http://wassan128.github.io/blog/tags/math/"/>
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[図書館が開いてるか教えてくれるだけのbotを作った話]]></title>
    <link href="http://wassan128.github.io/blog/2016/04/03/"/>
    <id>http://wassan128.github.io/blog/2016/04/03/</id>
    <published>2016-04-03T02:17:29.000Z</published>
    <updated>2016-04-03T05:39:21.346Z</updated>
    <content type="html"><![CDATA[<h2 id="概要">概要</h2><img src="/blog/2016/04/03/siri.png" alt="”わかりて”" title="”わかりて”">
<p>時は2016年4月。人工知能が世の中で盛り上がりを見せる中、某O高専の学生は「図書館今日開いてたっけ」と思った時、お手元の人工知能に尋ねるわけにもいかず、通常は直接足を運ぶか、インターネット上に公開されている「開館カレンダー」を見ることで開館状況を確認する。しかしそのためだけにいちいちPCを起動し、n回のクリックを経てサイトにアクセスするのは面倒だ。もう少し気軽に開館状況を知ることができれば…。<br>するとそこへ一羽の青い鳥が颯爽と現れ、大丈夫さ、と呟く…。</p>
<blockquote>
<p>――そう、Twitterならね。</p>
</blockquote>
<p>ということで、今回はPythonの勉強も兼ねて、開館状況を知りたい日付をリプライすると、その日の開館状況を返してくれるだけのTwitterBotを作りました(なお現在(2016/4/3時点)は動作させていません)。</p>
<a id="more"></a>
<h2 id="開発環境">開発環境</h2><p>OS: Windows7<br>言語: Python(2.7.11)</p>
<h2 id="開館状況の取得方法を検討する">開館状況の取得方法を検討する</h2><p>開館カレンダーは画像に示すように、開館の状況によって日付の背景色を変える表示方法が採用されています。カレンダーはHTMLのtableタグで構成されており、日付がそれぞれtdタグ(セル)に収まっているようです。よって、任意の日付の開館状況を知りたければ、その日付のtdの背景色を取得・判定できれば良さそうです。</p>
<img src="/blog/2016/04/03/library_calendar.png" alt="開館カレンダーの見た目。開館状況と背景色の対応表も示されている。" title="開館カレンダーの見た目。開館状況と背景色の対応表も示されている。">
<h2 id="スクレイピングの方法を検討する">スクレイピングの方法を検討する</h2><p>上記の通り、カレンダーはHTMLで構成されているため、その要素であるtdにアクセスするためにスクレイピングを行います。今回は、pythonでスクレイピングに使用できるライブラリ</p>
<ul>
<li>lxml(<a href="http://lxml.de/" target="_blank" rel="external">http://lxml.de/</a>)</li>
<li>BeautifulSoup4(<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a>)</li>
</ul>
<p>を試用しましたが、今回はBeautifulSoup4(以下bs4)を選択しました。bs4ではPure Python以外のHTMLパーサーが選択でき、試用の際にインストールしていたlxmlをパーサーとして選択することで、パース速度と、パース結果の正確性の向上が期待できそうです。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> lxml</span><br><span class="line">pip <span class="keyword">install</span> beautifulsoup4</span><br></pre></td></tr></table></figure></p>
<p>ここまでで、bs4のfindメソッド(<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find" target="_blank" rel="external">→doc</a>)を用いてtdタグに以下のようにアクセスできるようになりました。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line"><span class="preprocessor"># 第1引数にHTMLのデータ(urllibなどで取得してくる)、第2引数でパーサーを指定</span></span><br><span class="line">soup = BeautifulSoup(HTML_DATA, <span class="string">"lxml"</span>)</span><br><span class="line"><span class="preprocessor"># findメソッドを使用し、検索条件としてtdの値がDATEのものを探す</span></span><br><span class="line">td_data = soup.find(<span class="string">"td"</span>, <span class="keyword">text</span>=<span class="built_in">DATE</span>)</span><br></pre></td></tr></table></figure></p>
<p>また、スクレイピング等のテストで実際のURLにプログラムから何度もアクセスをかけているとそのうち怒られるような気がしたので、スクレイピングに関する全ての動作テストは、実際のカレンダーを模倣したHTMLファイルを作成し、localhost上で行いました。</p>
<h2 id="Twitterとの連携を行う方法を検討する">Twitterとの連携を行う方法を検討する</h2><p>今回は定期的に呟くタイプのBot形式ではなく、StreamingAPIを使用してリプライに反応するような仕様にしました。特にStreamingAPIにこだわる理由はありませんでしたが、pythonでStreamingAPIを叩いたことがなかったので、やってみたかったという感じです。ライブラリには「<a href="https://pypi.python.org/pypi/twitter" target="_blank" rel="external">twitter(1.17.1)</a>」を使用しました。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> twitter</span><br></pre></td></tr></table></figure></p>
<p>Streamingへの接続方法は以下のとおりです。<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twitter <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># OAuth認証用のキーを指定して認証情報を生成</span></span><br><span class="line">auth = OAuth(ACCESSTOKEN, ACCESSSECRET, CONSUMERKEY, CONSUMERSECRET)</span><br><span class="line"><span class="comment"># 接続</span></span><br><span class="line">stream = TwitterStream(auth=auth, domain=<span class="string">"userstream.twitter.com"</span>)</span><br></pre></td></tr></table></figure></p>
<p>反応の仕方は、<br>「@islibopen islib N」(Nは任意の日付)<br>というリプライを受け取ったら処理を実行し、結果をリプライする、という感じです。</p>
<h2 id="できたもの">できたもの</h2><img src="/blog/2016/04/03/exec_test.png" alt="図書館が開いているか実際に聞いてみた。やってる事自体は難しくないので、ちゃんと動作している。" title="図書館が開いているか実際に聞いてみた。やってる事自体は難しくないので、ちゃんと動作している。">
<h2 id="Botの公開・運営について">Botの公開・運営について</h2><p>未定です。</p>
<h2 id="作って思ったこととかまとめ">作って思ったこととかまとめ</h2><ul>
<li>td内にstyle属性が直書きされてるタイプのHTMLだったので、ザルな正規表現で背景色が取得できた。</li>
<li>今回は当月分しか対応していないが、201n年n月(カレンダー登録状況に依存するため、限界あり)対応はパラメータを変更することで簡単に実現できる。しかしやっていいのか…。てかそもそも作って使うのだろうか(何かを悟る)。</li>
<li>開発用に新たにTwitterアカウントを作成したが、これまでにもいくつか開発用にアカウントを作成しており、今回ついに巷で噂のスパム確認(電話番号登録)を強いられた(なんとかなった)。</li>
<li><del>作った後に改めて思ったけどあんまり役に立たない(重要)。</del></li>
<li>カレンダーの正しいスペルは「calend a r」。「calend e r」ではない（重要）</li>
<li>今後のためにも、スクレイピング関連の法律ちゃんと知っておきたい。</li>
</ul>
<p>以上です。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概要">概要</h2><img src="/blog/2016/04/03/siri.png" alt="”わかりて”" title="”わかりて”">
<p>時は2016年4月。人工知能が世の中で盛り上がりを見せる中、某O高専の学生は「図書館今日開いてたっけ」と思った時、お手元の人工知能に尋ねるわけにもいかず、通常は直接足を運ぶか、インターネット上に公開されている「開館カレンダー」を見ることで開館状況を確認する。しかしそのためだけにいちいちPCを起動し、n回のクリックを経てサイトにアクセスするのは面倒だ。もう少し気軽に開館状況を知ることができれば…。<br>するとそこへ一羽の青い鳥が颯爽と現れ、大丈夫さ、と呟く…。</p>
<blockquote>
<p>――そう、Twitterならね。</p>
</blockquote>
<p>ということで、今回はPythonの勉強も兼ねて、開館状況を知りたい日付をリプライすると、その日の開館状況を返してくれるだけのTwitterBotを作りました(なお現在(2016/4/3時点)は動作させていません)。</p>]]>
    
    </summary>
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
      <category term="twitter" scheme="http://wassan128.github.io/blog/tags/twitter/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoでの記事の追加とコメント機能について]]></title>
    <link href="http://wassan128.github.io/blog/2015/09/11/"/>
    <id>http://wassan128.github.io/blog/2015/09/11/</id>
    <published>2015-09-11T10:23:00.000Z</published>
    <updated>2015-09-11T14:06:56.807Z</updated>
    <content type="html"><![CDATA[<h2 id="今回の記事について">今回の記事について</h2><p>昨日書いた記事の中で、Hexoで新しい記事を作成するところについて触れていなかったので、その追記がてら、しれっと追加したコメント機能のところについて書き残しておきます。<br><a id="more"></a></p>
<h2 id="記事を追加する「へくそにゅー」">記事を追加する「へくそにゅー」</h2><p>さて、「新しい記事を追加する」という作業は記事に書き忘れるほど<strong>とても簡単</strong>にできます。その作業とは、コマンドプロンプトで作業用フォルダ上まで行き、<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"ARTICLE_TITLE"</span></span><br></pre></td></tr></table></figure></p>
<p>とするだけです。簡単ですね…。このコマンドによって「作業用フォルダ &gt; source &gt; _posts」内に「ARTICLE_TITLE.md」というファイルが作成されます。ですので、あとはこの中にMarkdown形式で記事を書いていけばOKです。</p>
<h2 id="コメント機能">コメント機能</h2><p>次に、コメント機能についてですが、Hexoのテーマによっては最初からコメント欄がついているものもあるみたいですが、このデフォルトのテーマ「landscape」にはついていませんでした。どうやってつけるのか調べていたら、「<a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a>」というディスカッションツール(?)を導入できることがわかりました。<br><img src="/blog/2015/09/11/disqus.png" alt="DISQUS" title="DISQUS"><br>まずDisqusの<a href="https://disqus.com/profile/signup/?next=https%3A%2F%2Fdisqus.com%2F" target="_blank" rel="external">アカウントを取得</a>、もしくは既存のSNSアカウントでログインします。今回僕はTwitterアカウントでログインしました。その後、歯車アイコンの中の「Add Disqus To Site」というメニューから登録したいサイトのURLとshortnameという項目を設定します。このshortnameという項目に指定したものは後で「_config.yml」に設定します。「Finish registration」というボタンを押して登録完了です。<br><img src="/blog/2015/09/11/disqus_site.png" alt="shortnameは覚えやすいものにした方がよいです" title="shortnameは覚えやすいものにした方がよいです"></p>
<p>あとはHexo側の設定をすればコメント欄が自動的に追加されます。Hexo側は手動で「_config.yml」の設定をするか以下のコマンドで<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo config <span class="name">disqus_shortname</span> &#123;YOUR_SHORTNAME&#125;</span><br><span class="line"><span class="name">hexo</span> --config themes/light/_config.yml config comment_provider disqus</span><br></pre></td></tr></table></figure></p>
<p>とすることで設定が完了します。これでコメント欄が使えるようになりました！<br><img src="/blog/2015/09/11/disqus_comment.png" alt="やせいの コメント欄 があらわれた!" title="やせいの コメント欄 があらわれた!"></p>
<h2 id="まとめ">まとめ</h2><p>今回は記事の追加方法とコメント欄の追加について書きました。どちらも簡単にできました。Disqusのようにプラグインを簡単に導入できるのもHexoの強みなんでしょうね。これからも良さげなプラグインがあったら入れてみたいと思います。</p>
<h2 id="参考にさせていただいたサイト">参考にさせていただいたサイト</h2><ul>
<li><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！</a></li>
<li><a href="http://kazunorimiura.com/post/86205749581/tumblr%E3%81%ABdisqus%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%82%84%E8%A8%AD%E7%BD%AE%E6%96%B9%E6%B3%95%E3%81%AA%E3%81%A9" target="_blank" rel="external">TumblrにDisqusコメントを導入するメリットや設置方法など</a></li>
<li><a href="http://harasou.github.io/2015/05/05/hexo-%E3%81%AB-DISQUS-%E3%82%92%E8%BF%BD%E5%8A%A0/" target="_blank" rel="external">hexo に DISQUS を追加</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="今回の記事について">今回の記事について</h2><p>昨日書いた記事の中で、Hexoで新しい記事を作成するところについて触れていなかったので、その追記がてら、しれっと追加したコメント機能のところについて書き残しておきます。<br>]]>
    
    </summary>
    
      <category term="disqus" scheme="http://wassan128.github.io/blog/tags/disqus/"/>
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoで生成したブログをGitHub Pagesで公開するまで]]></title>
    <link href="http://wassan128.github.io/blog/2015/09/10/"/>
    <id>http://wassan128.github.io/blog/2015/09/10/</id>
    <published>2015-09-10T14:26:24.000Z</published>
    <updated>2015-09-11T02:05:24.987Z</updated>
    <content type="html"><![CDATA[<p>どうも、太鼓の達人(実機)をしばらくプレイしないうちに腕がなまってしまった太古の達人(?)わっさんです。さて、今回はこのブログを生成してGitHubを使って公開するまでの流れを書き残しておきたいと思います。</p>
<h2 id="要約(というか超雑な流れ)">要約(というか超雑な流れ)</h2><p>長文になるので、今回の説明の大まかな流れを示します。</p>
<ol>
<li>Node.jsをインストール</li>
<li>Hexoをnpmでインストール</li>
<li>GitHubリポジトリを用意し、Git周りの設定を完了する</li>
<li>デプロイ&amp;確認</li>
</ol>
<a id="more"></a>
<h2 id="環境">環境</h2><ul>
<li>Windows 7 Enterprise</li>
<li>Node.js(v0.12.7)</li>
<li>npm(v2.11.3)</li>
</ul>
<h2 id="Node-jsをインストール">Node.jsをインストール</h2><p>Node.jsはサーバーサイドで使用できるJavaScriptの事で、従来フロントエンドで使用してきたJavaScriptをサーバーサイドで使おう、というものです。こちらのインストールはWindows環境ということで、インストーラを使って行いました(<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js 公式サイト</a>)。インストールが終わったら、コマンドプロンプトで<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v   <span class="comment">//v0.12.7</span></span><br><span class="line">npm -v   <span class="comment">//2.11.3</span></span><br></pre></td></tr></table></figure></p>
<p>として確認を行いました。npmは、「Node Package Manager」の略称らしいです。その名の通り、Node.js関連のモジュールインストールなどで活躍してくれるに違いありません。今回も何回か使います。</p>
<h2 id="Hexoをインストール">Hexoをインストール</h2><p>次に、ブログの生成ツールをインストールします。今回は、静的サイトジェネレーターの<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>を使ってブログ本体を生成します。こちらは、先ほど確認を行ったnpmを使ってインストールします。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo-cli</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Hexoを使ってみる">Hexoを使ってみる</h2><p>Hexoでは、コマンドを打ち込むことでブログのひな形を生成したり、記事を作成したりしていきます。まずはひな形を作っていきます。作業用フォルダを生成する場所を決めたらコマンドプロンプトでその場所まで移動して、<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> init FOLDER</span><br></pre></td></tr></table></figure></p>
<p>というコマンドを実行します。「FOLDER」の部分は、好きな名前にして実行してください(作業用フォルダ名になるだけです)。<br>次に、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> FOLDER</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>として、モジュールをインストールします。これだけでひな形の作成は完了です。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> s</span><br></pre></td></tr></table></figure></p>
<p>としてローカルサーバーを起動し、<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>にアクセスしてみましょう。宇宙感あふれるページが表示されているかと思います。</p>
<h2 id="生成したブログの編集">生成したブログの編集</h2><p>ひな形を作れたのは良いですが、このままでは面白くありませんね。ここで生成したフォルダを見てみましょう。「_config.yml」というファイルがあると思いますが、この中身を編集することでブログの全般的な設定をすることが出来ます。<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">こちら</a>(Hexo公式ページ)を参考にしながら、ブログのタイトル等を編集していきます。それぞれhtmlに変換した際にmetaタグなどに反映されていきます。</p>
<p>そのほかにもいろいろとフォルダやらファイルがありますが、例えば「themes」というフォルダの中にブログのデザインに関するスタイラスのファイルなどが入っていますので、その辺を変更することで見た目を変えることが出来ます。</p>
<p>デフォルトの宇宙感あふれるテーマは「landscape」という名前ですが、ネット上に<a href="https://hexo.io/themes/" target="_blank" rel="external">テーマが多く存在</a>するので、好きに変更することもできます。僕はこのデフォルトのテーマを少しいじったものを使っています。</p>
<h2 id="GitHubをセットアップ">GitHubをセットアップ</h2><p>まず<a href="https://github.com/" target="_blank" rel="external">GitHub</a>リポジトリを作成します。GitHub Pagesにブログを置くことももちろんできますが、今回僕はサブディレクトリに配置したかったので「blog」というリポジトリを作成しました。「gh-pages」ブランチを作成したら、お手元のGit Bash等を使ってsshキーをジェネレートしてGitHub側に登録しておきます。これでGitHubとマシンのひも付けができるので、GitHub側の準備は完了です。</p>
<p>(ちなみに僕はこの作業を忘れていたためにデプロイで躓きました…(´・ω・`))</p>
<h2 id="HexoからGitHubへデプロイ">HexoからGitHubへデプロイ</h2><p>ここまで来たらいよいよデプロイです。先ほど編集した「_config.yml」を開き、<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">url:</span> <span class="string">'http://USER_ID.github.io/REPO_NAME/'</span></span><br><span class="line"><span class="string">root:</span> <span class="regexp">/REPO_NAME/</span></span><br></pre></td></tr></table></figure></p>
<p>というように先ほど作成したリポジトリ名を指定します。<br>しかし、このままだと「themes」内の「_config.yml」の内容が悪さをしてアーカイブなどのリンクがうまく生成されないので、ファイルの下の方に<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">theme_config</span>:</span><br><span class="line">  <span class="attribute">menu</span>:</span><br><span class="line">    <span class="attribute">Home</span>: /REPO_NAME</span><br><span class="line">    <span class="attribute">Archives</span>: /REPO_NAME/archives</span><br></pre></td></tr></table></figure></p>
<p>と記述しておきます。その後、<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="string">'git@github.com:USER_ID/REPO_NAME.git'</span></span><br><span class="line">  <span class="attribute">branch</span>: gh-pages</span><br></pre></td></tr></table></figure></p>
<p>といった形でデプロイ用の設定を記述します。では、デプロイしましょう！<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">d</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure></p>
<p>「hexo d」コマンドでデプロイできますが、「-g」オプションを付加するとデプロイ前にhtmlなどを生成してくれます(生成の結果、作業用フォルダ内に「public」というフォルダが作られます)。</p>
<p>エラーが出なければ成功です！指定したURLにアクセスして、確認しましょう。</p>
<h2 id="まとめと今後の展望">まとめと今後の展望</h2><p>今回は、Hexoを利用して生成したブログをGitHub Pagesに公開することを目的として作業を行いました。作業にあたって、いろんなサイトを参考にさせてもらいましたが、Windows環境でやって記事にしている方が少なかったので、少し苦労しました(Gitについてよく知らないことが一番の原因だとは思いますが)。</p>
<p>また、この記事はMarkdown形式で書いていますが、まだ書き方がよくわからないのでわかりにくいところや間違ってるところ等あればコメントで教えていただけると幸いです。ブログのテーマについてはファイルをいじることで簡単に変更でき、良さげなので、これからしばらく運営していこうと思います。</p>
<h2 id="参考にさせていただいたサイト">参考にさせていただいたサイト</h2><ul>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo(公式サイト)</a></li>
<li><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！</a></li>
<li><a href="http://pagent.github.io/2014/11/24/hexo-windows-deploy/" target="_blank" rel="external">WindowsでHexoを使う(deploy)</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>どうも、太鼓の達人(実機)をしばらくプレイしないうちに腕がなまってしまった太古の達人(?)わっさんです。さて、今回はこのブログを生成してGitHubを使って公開するまでの流れを書き残しておきたいと思います。</p>
<h2 id="要約(というか超雑な流れ)">要約(というか超雑な流れ)</h2><p>長文になるので、今回の説明の大まかな流れを示します。</p>
<ol>
<li>Node.jsをインストール</li>
<li>Hexoをnpmでインストール</li>
<li>GitHubリポジトリを用意し、Git周りの設定を完了する</li>
<li>デプロイ&amp;確認</li>
</ol>]]>
    
    </summary>
    
      <category term="Node.js" scheme="http://wassan128.github.io/blog/tags/Node-js/"/>
    
      <category term="git" scheme="http://wassan128.github.io/blog/tags/git/"/>
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ブログはじめました]]></title>
    <link href="http://wassan128.github.io/blog/2015/09/08/"/>
    <id>http://wassan128.github.io/blog/2015/09/08/</id>
    <published>2015-09-08T13:52:19.000Z</published>
    <updated>2015-09-11T02:05:18.983Z</updated>
    <content type="html"><![CDATA[<h2 id="ようやくつくった">ようやくつくった</h2><p>ずっと作る作るといって作ってなかったので、夏休みを利用してブログを作ることにしました。</p>
<h2 id="今回使ったもの">今回使ったもの</h2><p>Hexo： 静的サイトジェネレーター<br>GitHub Pages: 置き場所</p>
<p>gitがまだよくわからないのでいろいろ躓いた…(´・ω・`)<br>かなり雑ですが、またいつか記事にしますので、今日はここまででさようなら。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="ようやくつくった">ようやくつくった</h2><p>ずっと作る作るといって作ってなかったので、夏休みを利用してブログを作ることにしました。</p>
<h2 id="今回使ったもの">今回使ったもの</h2><p>Hexo： 静的サイトジェネレーター<br>GitH]]>
    </summary>
    
      <category term="git" scheme="http://wassan128.github.io/blog/tags/git/"/>
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
  </entry>
  
</feed>
