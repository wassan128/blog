<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[クロワッサンは黒くない]]></title>
  <subtitle><![CDATA[とある高専生の備忘録的な何かになるかもしれない]]></subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://wassan128.github.io/blog/"/>
  <updated>2016-04-03T05:37:32.794Z</updated>
  <id>http://wassan128.github.io/blog/</id>
  
  <author>
    <name><![CDATA[wassan128]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[図書館が開いてるか教えてくれるだけのbotを作った話]]></title>
    <link href="http://wassan128.github.io/blog/2016/04/03/"/>
    <id>http://wassan128.github.io/blog/2016/04/03/</id>
    <published>2016-04-03T02:17:29.000Z</published>
    <updated>2016-04-03T05:37:32.794Z</updated>
    <content type="html"><![CDATA[<h2 id="概要">概要</h2><img src="/blog/2016/04/03/siri.png" alt="”わかりて”" title="”わかりて”">
<p>時は2016年4月。人工知能が世の中で盛り上がりを見せる中、某O高専の学生は「図書館今日開いてたっけ」と思った時、お手元の人工知能に尋ねるわけにもいかず、通常は直接足を運ぶか、インターネット上に公開されている「開館カレンダー」を見ることで開館状況を確認する。しかしそのためだけにいちいちPCを起動し、n回のクリックを経てサイトにアクセスするのは面倒だ。もう少し気軽に開館状況を知ることができれば…。<br>するとそこへ一羽の青い鳥が颯爽と現れ、大丈夫さ、と呟く…。</p>
<blockquote>
<p>――そう、Twitterならね。</p>
</blockquote>
<p>ということで、今回はPythonの勉強も兼ねて、開館状況を知りたい日付をリプライすると、その日の開館状況を返してくれるだけのTwitterBotを作りました(なお現在(2016/4/3時点)は動作させていません)。</p>
<a id="more"></a>
<h2 id="開発環境">開発環境</h2><p>OS: Windows7<br>言語: Python(2.7.11)</p>
<h2 id="開館状況の取得方法を検討する">開館状況の取得方法を検討する</h2><p>開館カレンダーは画像に示すように、開館の状況によって日付の背景色を変える表示方法が採用されています。カレンダーはHTMLのtableタグで構成されており、日付がそれぞれtdタグ(セル)に収まっているようです。よって、任意の日付の開館状況を知りたければ、その日付のtdの背景色を取得・判定できれば良さそうです。</p>
<img src="/blog/2016/04/03/library_calendar.png" alt="開館カレンダーの見た目。開館状況と背景色の対応表も示されている。" title="開館カレンダーの見た目。開館状況と背景色の対応表も示されている。">
<h2 id="スクレイピングの方法を検討する">スクレイピングの方法を検討する</h2><p>上記の通り、カレンダーはHTMLで構成されているため、その要素であるtdにアクセスするためにスクレイピングを行います。今回は、pythonでスクレイピングに使用できるライブラリ</p>
<ul>
<li>lxml(<a href="http://lxml.de/" target="_blank" rel="external">http://lxml.de/</a>)</li>
<li>BeautifulSoup4(<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a>)</li>
</ul>
<p>を試用しましたが、今回はBeautifulSoup4(以下bs4)を選択しました。bs4ではPure Python以外のHTMLパーサーが選択でき、試用の際にインストールしていたlxmlをパーサーとして選択することで、パース速度と、パース結果の正確性の向上が期待できそうです。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> lxml</span><br><span class="line">pip <span class="keyword">install</span> beautifulsoup4</span><br></pre></td></tr></table></figure></p>
<p>ここまでで、bs4のfindメソッド(<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find" target="_blank" rel="external">→doc</a>)を用いてtdタグに以下のようにアクセスできるようになりました。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line"><span class="preprocessor"># 第1引数にHTMLのデータ(urllibなどで取得してくる)、第2引数でパーサーを指定</span></span><br><span class="line">soup = BeautifulSoup(HTML_DATA, <span class="string">"lxml"</span>)</span><br><span class="line"><span class="preprocessor"># findメソッドを使用し、検索条件としてtdの値がDATEのものを探す</span></span><br><span class="line">td_data = soup.find(<span class="string">"td"</span>, <span class="keyword">text</span>=<span class="built_in">DATE</span>)</span><br></pre></td></tr></table></figure></p>
<p>また、スクレイピング等のテストで実際のURLにプログラムから何度もアクセスをかけているとそのうち怒られるような気がしたので、スクレイピングに関する全ての動作テストは、実際のカレンダーを模倣したHTMLファイルを作成し、localhost上で行いました。</p>
<h2 id="Twitterとの連携を行う方法を検討する">Twitterとの連携を行う方法を検討する</h2><p>今回は定期的に呟くタイプのBot形式ではなく、StreamingAPIを使用してリプライに反応するような仕様にしました。特にStreamingAPIにこだわる理由はありませんでしたが、pythonでStreamingAPIを叩いたことがなかったので、やってみたかったという感じです。ライブラリには「<a href="https://pypi.python.org/pypi/twitter" target="_blank" rel="external">twitter(1.17.1)</a>」を使用しました。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> twitter</span><br></pre></td></tr></table></figure></p>
<p>Streamingへの接続方法は以下のとおりです。<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twitter <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># OAuth認証用のキーを指定して認証情報を生成</span></span><br><span class="line">auth = OAuth(ACCESSTOKEN, ACCESSSECRET, CONSUMERKEY, CONSUMERSECRET)</span><br><span class="line"><span class="comment"># 接続</span></span><br><span class="line">stream = TwitterStream(auth=auth, domain=<span class="string">"userstream.twitter.com"</span>)</span><br></pre></td></tr></table></figure></p>
<p>反応の仕方は、<br>「@islibopen islib N」(Nは任意の日付)<br>というリプライを受け取ったら処理を実行し、結果をリプライする、という感じです。</p>
<h2 id="できたもの">できたもの</h2><img src="/blog/2016/04/03/exec_test.png" alt="図書館が開いているか実際に聞いてみた。やってる事自体は難しくないので、ちゃんと動作している。" title="図書館が開いているか実際に聞いてみた。やってる事自体は難しくないので、ちゃんと動作している。">
<h2 id="Botの公開・運営について">Botの公開・運営について</h2><p>未定です。</p>
<h2 id="作って思ったこととかまとめ">作って思ったこととかまとめ</h2><ul>
<li>td内にstyle属性が直書きされてるタイプのHTMLだったので、ザルな正規表現で背景色が取得できた。</li>
<li>今回は当月分しか対応していないが、201n年n月(カレンダー登録状況に依存するため、限界あり)対応はパラメータを変更することで簡単に実現できる。しかしやっていいのか…。てかそもそも作って使うのだろうか(何かを悟る)。</li>
<li>開発用に新たにTwitterアカウントを作成したが、これまでにもいくつか開発用にアカウントを作成しており、今回ついに巷で噂のスパム確認(電話番号登録)を強いられた(なんとかなった)。</li>
<li><del>作った後に改めて思ったけどあんまり役に立たない(重要)。</del></li>
<li>今後のためにも、スクレイピング関連の法律ちゃんと知っておきたい。</li>
</ul>
<p>以上です。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概要">概要</h2><img src="/blog/2016/04/03/siri.png" alt="”わかりて”" title="”わかりて”">
<p>時は2016年4月。人工知能が世の中で盛り上がりを見せる中、某O高専の学生は「図書館今日開いてたっけ」と思った時、お手元の人工知能に尋ねるわけにもいかず、通常は直接足を運ぶか、インターネット上に公開されている「開館カレンダー」を見ることで開館状況を確認する。しかしそのためだけにいちいちPCを起動し、n回のクリックを経てサイトにアクセスするのは面倒だ。もう少し気軽に開館状況を知ることができれば…。<br>するとそこへ一羽の青い鳥が颯爽と現れ、大丈夫さ、と呟く…。</p>
<blockquote>
<p>――そう、Twitterならね。</p>
</blockquote>
<p>ということで、今回はPythonの勉強も兼ねて、開館状況を知りたい日付をリプライすると、その日の開館状況を返してくれるだけのTwitterBotを作りました(なお現在(2016/4/3時点)は動作させていません)。</p>]]>
    
    </summary>
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
      <category term="twitter" scheme="http://wassan128.github.io/blog/tags/twitter/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoでの記事の追加とコメント機能について]]></title>
    <link href="http://wassan128.github.io/blog/2015/09/11/"/>
    <id>http://wassan128.github.io/blog/2015/09/11/</id>
    <published>2015-09-11T10:23:00.000Z</published>
    <updated>2015-09-11T14:06:56.807Z</updated>
    <content type="html"><![CDATA[<h2 id="今回の記事について">今回の記事について</h2><p>昨日書いた記事の中で、Hexoで新しい記事を作成するところについて触れていなかったので、その追記がてら、しれっと追加したコメント機能のところについて書き残しておきます。<br><a id="more"></a></p>
<h2 id="記事を追加する「へくそにゅー」">記事を追加する「へくそにゅー」</h2><p>さて、「新しい記事を追加する」という作業は記事に書き忘れるほど<strong>とても簡単</strong>にできます。その作業とは、コマンドプロンプトで作業用フォルダ上まで行き、<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"ARTICLE_TITLE"</span></span><br></pre></td></tr></table></figure></p>
<p>とするだけです。簡単ですね…。このコマンドによって「作業用フォルダ &gt; source &gt; _posts」内に「ARTICLE_TITLE.md」というファイルが作成されます。ですので、あとはこの中にMarkdown形式で記事を書いていけばOKです。</p>
<h2 id="コメント機能">コメント機能</h2><p>次に、コメント機能についてですが、Hexoのテーマによっては最初からコメント欄がついているものもあるみたいですが、このデフォルトのテーマ「landscape」にはついていませんでした。どうやってつけるのか調べていたら、「<a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a>」というディスカッションツール(?)を導入できることがわかりました。<br><img src="/blog/2015/09/11/disqus.png" alt="DISQUS" title="DISQUS"><br>まずDisqusの<a href="https://disqus.com/profile/signup/?next=https%3A%2F%2Fdisqus.com%2F" target="_blank" rel="external">アカウントを取得</a>、もしくは既存のSNSアカウントでログインします。今回僕はTwitterアカウントでログインしました。その後、歯車アイコンの中の「Add Disqus To Site」というメニューから登録したいサイトのURLとshortnameという項目を設定します。このshortnameという項目に指定したものは後で「_config.yml」に設定します。「Finish registration」というボタンを押して登録完了です。<br><img src="/blog/2015/09/11/disqus_site.png" alt="shortnameは覚えやすいものにした方がよいです" title="shortnameは覚えやすいものにした方がよいです"></p>
<p>あとはHexo側の設定をすればコメント欄が自動的に追加されます。Hexo側は手動で「_config.yml」の設定をするか以下のコマンドで<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo config <span class="name">disqus_shortname</span> &#123;YOUR_SHORTNAME&#125;</span><br><span class="line"><span class="name">hexo</span> --config themes/light/_config.yml config comment_provider disqus</span><br></pre></td></tr></table></figure></p>
<p>とすることで設定が完了します。これでコメント欄が使えるようになりました！<br><img src="/blog/2015/09/11/disqus_comment.png" alt="やせいの コメント欄 があらわれた!" title="やせいの コメント欄 があらわれた!"></p>
<h2 id="まとめ">まとめ</h2><p>今回は記事の追加方法とコメント欄の追加について書きました。どちらも簡単にできました。Disqusのようにプラグインを簡単に導入できるのもHexoの強みなんでしょうね。これからも良さげなプラグインがあったら入れてみたいと思います。</p>
<h2 id="参考にさせていただいたサイト">参考にさせていただいたサイト</h2><ul>
<li><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！</a></li>
<li><a href="http://kazunorimiura.com/post/86205749581/tumblr%E3%81%ABdisqus%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%82%84%E8%A8%AD%E7%BD%AE%E6%96%B9%E6%B3%95%E3%81%AA%E3%81%A9" target="_blank" rel="external">TumblrにDisqusコメントを導入するメリットや設置方法など</a></li>
<li><a href="http://harasou.github.io/2015/05/05/hexo-%E3%81%AB-DISQUS-%E3%82%92%E8%BF%BD%E5%8A%A0/" target="_blank" rel="external">hexo に DISQUS を追加</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="今回の記事について">今回の記事について</h2><p>昨日書いた記事の中で、Hexoで新しい記事を作成するところについて触れていなかったので、その追記がてら、しれっと追加したコメント機能のところについて書き残しておきます。<br>]]>
    
    </summary>
    
      <category term="disqus" scheme="http://wassan128.github.io/blog/tags/disqus/"/>
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexoで生成したブログをGitHub Pagesで公開するまで]]></title>
    <link href="http://wassan128.github.io/blog/2015/09/10/"/>
    <id>http://wassan128.github.io/blog/2015/09/10/</id>
    <published>2015-09-10T14:26:24.000Z</published>
    <updated>2015-09-11T02:05:24.987Z</updated>
    <content type="html"><![CDATA[<p>どうも、太鼓の達人(実機)をしばらくプレイしないうちに腕がなまってしまった太古の達人(?)わっさんです。さて、今回はこのブログを生成してGitHubを使って公開するまでの流れを書き残しておきたいと思います。</p>
<h2 id="要約(というか超雑な流れ)">要約(というか超雑な流れ)</h2><p>長文になるので、今回の説明の大まかな流れを示します。</p>
<ol>
<li>Node.jsをインストール</li>
<li>Hexoをnpmでインストール</li>
<li>GitHubリポジトリを用意し、Git周りの設定を完了する</li>
<li>デプロイ&amp;確認</li>
</ol>
<a id="more"></a>
<h2 id="環境">環境</h2><ul>
<li>Windows 7 Enterprise</li>
<li>Node.js(v0.12.7)</li>
<li>npm(v2.11.3)</li>
</ul>
<h2 id="Node-jsをインストール">Node.jsをインストール</h2><p>Node.jsはサーバーサイドで使用できるJavaScriptの事で、従来フロントエンドで使用してきたJavaScriptをサーバーサイドで使おう、というものです。こちらのインストールはWindows環境ということで、インストーラを使って行いました(<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js 公式サイト</a>)。インストールが終わったら、コマンドプロンプトで<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v   <span class="comment">//v0.12.7</span></span><br><span class="line">npm -v   <span class="comment">//2.11.3</span></span><br></pre></td></tr></table></figure></p>
<p>として確認を行いました。npmは、「Node Package Manager」の略称らしいです。その名の通り、Node.js関連のモジュールインストールなどで活躍してくれるに違いありません。今回も何回か使います。</p>
<h2 id="Hexoをインストール">Hexoをインストール</h2><p>次に、ブログの生成ツールをインストールします。今回は、静的サイトジェネレーターの<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>を使ってブログ本体を生成します。こちらは、先ほど確認を行ったnpmを使ってインストールします。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo-cli</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Hexoを使ってみる">Hexoを使ってみる</h2><p>Hexoでは、コマンドを打ち込むことでブログのひな形を生成したり、記事を作成したりしていきます。まずはひな形を作っていきます。作業用フォルダを生成する場所を決めたらコマンドプロンプトでその場所まで移動して、<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> init FOLDER</span><br></pre></td></tr></table></figure></p>
<p>というコマンドを実行します。「FOLDER」の部分は、好きな名前にして実行してください(作業用フォルダ名になるだけです)。<br>次に、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> FOLDER</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>として、モジュールをインストールします。これだけでひな形の作成は完了です。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> s</span><br></pre></td></tr></table></figure></p>
<p>としてローカルサーバーを起動し、<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>にアクセスしてみましょう。宇宙感あふれるページが表示されているかと思います。</p>
<h2 id="生成したブログの編集">生成したブログの編集</h2><p>ひな形を作れたのは良いですが、このままでは面白くありませんね。ここで生成したフォルダを見てみましょう。「_config.yml」というファイルがあると思いますが、この中身を編集することでブログの全般的な設定をすることが出来ます。<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">こちら</a>(Hexo公式ページ)を参考にしながら、ブログのタイトル等を編集していきます。それぞれhtmlに変換した際にmetaタグなどに反映されていきます。</p>
<p>そのほかにもいろいろとフォルダやらファイルがありますが、例えば「themes」というフォルダの中にブログのデザインに関するスタイラスのファイルなどが入っていますので、その辺を変更することで見た目を変えることが出来ます。</p>
<p>デフォルトの宇宙感あふれるテーマは「landscape」という名前ですが、ネット上に<a href="https://hexo.io/themes/" target="_blank" rel="external">テーマが多く存在</a>するので、好きに変更することもできます。僕はこのデフォルトのテーマを少しいじったものを使っています。</p>
<h2 id="GitHubをセットアップ">GitHubをセットアップ</h2><p>まず<a href="https://github.com/" target="_blank" rel="external">GitHub</a>リポジトリを作成します。GitHub Pagesにブログを置くことももちろんできますが、今回僕はサブディレクトリに配置したかったので「blog」というリポジトリを作成しました。「gh-pages」ブランチを作成したら、お手元のGit Bash等を使ってsshキーをジェネレートしてGitHub側に登録しておきます。これでGitHubとマシンのひも付けができるので、GitHub側の準備は完了です。</p>
<p>(ちなみに僕はこの作業を忘れていたためにデプロイで躓きました…(´・ω・`))</p>
<h2 id="HexoからGitHubへデプロイ">HexoからGitHubへデプロイ</h2><p>ここまで来たらいよいよデプロイです。先ほど編集した「_config.yml」を開き、<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">url:</span> <span class="string">'http://USER_ID.github.io/REPO_NAME/'</span></span><br><span class="line"><span class="string">root:</span> <span class="regexp">/REPO_NAME/</span></span><br></pre></td></tr></table></figure></p>
<p>というように先ほど作成したリポジトリ名を指定します。<br>しかし、このままだと「themes」内の「_config.yml」の内容が悪さをしてアーカイブなどのリンクがうまく生成されないので、ファイルの下の方に<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">theme_config</span>:</span><br><span class="line">  <span class="attribute">menu</span>:</span><br><span class="line">    <span class="attribute">Home</span>: /REPO_NAME</span><br><span class="line">    <span class="attribute">Archives</span>: /REPO_NAME/archives</span><br></pre></td></tr></table></figure></p>
<p>と記述しておきます。その後、<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="string">'git@github.com:USER_ID/REPO_NAME.git'</span></span><br><span class="line">  <span class="attribute">branch</span>: gh-pages</span><br></pre></td></tr></table></figure></p>
<p>といった形でデプロイ用の設定を記述します。では、デプロイしましょう！<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">d</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure></p>
<p>「hexo d」コマンドでデプロイできますが、「-g」オプションを付加するとデプロイ前にhtmlなどを生成してくれます(生成の結果、作業用フォルダ内に「public」というフォルダが作られます)。</p>
<p>エラーが出なければ成功です！指定したURLにアクセスして、確認しましょう。</p>
<h2 id="まとめと今後の展望">まとめと今後の展望</h2><p>今回は、Hexoを利用して生成したブログをGitHub Pagesに公開することを目的として作業を行いました。作業にあたって、いろんなサイトを参考にさせてもらいましたが、Windows環境でやって記事にしている方が少なかったので、少し苦労しました(Gitについてよく知らないことが一番の原因だとは思いますが)。</p>
<p>また、この記事はMarkdown形式で書いていますが、まだ書き方がよくわからないのでわかりにくいところや間違ってるところ等あればコメントで教えていただけると幸いです。ブログのテーマについてはファイルをいじることで簡単に変更でき、良さげなので、これからしばらく運営していこうと思います。</p>
<h2 id="参考にさせていただいたサイト">参考にさせていただいたサイト</h2><ul>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo(公式サイト)</a></li>
<li><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！</a></li>
<li><a href="http://pagent.github.io/2014/11/24/hexo-windows-deploy/" target="_blank" rel="external">WindowsでHexoを使う(deploy)</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>どうも、太鼓の達人(実機)をしばらくプレイしないうちに腕がなまってしまった太古の達人(?)わっさんです。さて、今回はこのブログを生成してGitHubを使って公開するまでの流れを書き残しておきたいと思います。</p>
<h2 id="要約(というか超雑な流れ)">要約(というか超雑な流れ)</h2><p>長文になるので、今回の説明の大まかな流れを示します。</p>
<ol>
<li>Node.jsをインストール</li>
<li>Hexoをnpmでインストール</li>
<li>GitHubリポジトリを用意し、Git周りの設定を完了する</li>
<li>デプロイ&amp;確認</li>
</ol>]]>
    
    </summary>
    
      <category term="Node.js" scheme="http://wassan128.github.io/blog/tags/Node-js/"/>
    
      <category term="git" scheme="http://wassan128.github.io/blog/tags/git/"/>
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ブログはじめました]]></title>
    <link href="http://wassan128.github.io/blog/2015/09/08/"/>
    <id>http://wassan128.github.io/blog/2015/09/08/</id>
    <published>2015-09-08T13:52:19.000Z</published>
    <updated>2015-09-11T02:05:18.983Z</updated>
    <content type="html"><![CDATA[<h2 id="ようやくつくった">ようやくつくった</h2><p>ずっと作る作るといって作ってなかったので、夏休みを利用してブログを作ることにしました。</p>
<h2 id="今回使ったもの">今回使ったもの</h2><p>Hexo： 静的サイトジェネレーター<br>GitHub Pages: 置き場所</p>
<p>gitがまだよくわからないのでいろいろ躓いた…(´・ω・`)<br>かなり雑ですが、またいつか記事にしますので、今日はここまででさようなら。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="ようやくつくった">ようやくつくった</h2><p>ずっと作る作るといって作ってなかったので、夏休みを利用してブログを作ることにしました。</p>
<h2 id="今回使ったもの">今回使ったもの</h2><p>Hexo： 静的サイトジェネレーター<br>GitH]]>
    </summary>
    
      <category term="git" scheme="http://wassan128.github.io/blog/tags/git/"/>
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
  </entry>
  
</feed>
