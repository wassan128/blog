<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>クロワッサンは黒くない</title>
  <subtitle>とある高専生の備忘録的な何かになるかもしれない</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://wassan128.github.io/blog/"/>
  <updated>2017-06-26T12:46:17.834Z</updated>
  <id>http://wassan128.github.io/blog/</id>
  
  <author>
    <name>wassan128</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hardening 1010 Cash Flowに参加した話</title>
    <link href="http://wassan128.github.io/blog/2017/06/26/"/>
    <id>http://wassan128.github.io/blog/2017/06/26/</id>
    <published>2017-06-26T00:43:48.000Z</published>
    <updated>2017-06-26T12:46:17.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>去る23日、沖縄コンベンションセンターで10回目(記念回!)の「<a href="https://wasforum.jp/2017/04/hardening-1010-cash-flow/" target="_blank" rel="external">Hardening 1010 Cash Flow</a>」が開催されており、そこに参加しました。チーム「術中Hack」のメンバーとして参加し、グランプリをいただきました。記念回に初参加で参戦できただけでなく、10時間という今までにない競技時間を体験できたり、ラスト(?)沖縄回に参加できたり、グランプリをいただけたりと、本当に参加できて良かったと思えました。運営の皆様、MPの皆様、術中Hackの皆様、その他すべての関係者の皆様に感謝しております。<br>本記事ではチームのことや僕が競技中にやったことのメモを残したいと思います。</p>
<img src="/blog/2017/06/26/grand.png" alt="チーム「術中Hack」グランプリ(੭ ᐕ)੭" title="チーム「術中Hack」グランプリ(੭ ᐕ)੭">
<a id="more"></a>
<h2 id="Hardeningとは"><a href="#Hardeningとは" class="headerlink" title="Hardeningとは?"></a>Hardeningとは?</h2><p>文字通り「堅牢化」を行う競技です。では何を堅牢化するのか?というとECサイトやそれに関連するサーバーです。予め脆弱性の仕込まれたECサイトを安全な状態にし、攻撃者の手に落ちないよう守り、そして売り続ける―概要はこんな感じです。詳しい説明は<a href="https://wasforum.jp" target="_blank" rel="external">公式サイト</a>を参照ください。</p>
<h2 id="チーム「術中Hack」"><a href="#チーム「術中Hack」" class="headerlink" title="チーム「術中Hack」"></a>チーム「術中Hack」</h2><p>6人で構成された今回のチームは、内4人が沖縄高専からの参加ということで社会人が多く参加されるこの大会においては平均年齢が若いチームでした。また社会人の方がチームのリーダーやまとめ役を引き受けてくださり、安心感のあるチームでした。<br>高専勢は比較的集まりやすかったこともあり、話し合いをしたり情報共有をしたりしました。チーム全員での集まりはHardening Day前日の22日に行われ、そこで翌日の競技に向けて懇親を兼ねて戦略を話し合いました。この時点でのチームの方針は「初手借金、投資重視」でした。<br>それ以前はチームリーダーが爆速で作ってくださったSlackで情報共有をやったり、trelloでタスクの整理をしていました。</p>
<h2 id="競技中にやったこと"><a href="#競技中にやったこと" class="headerlink" title="競技中にやったこと"></a>競技中にやったこと</h2><p>僕は競技中主に「Webコンテンツの管理、脆弱性修正」を担当していました。開幕後各サーバーに接続できてからはユーザー(root含めて7個くらい?)のパスワードをデフォルトから変更したり、ECサイトはどんな感じなのか実際に見てみたり、WordPressの管理者パスワードを変更したりしました。<br>また今回の大会できっと出るだろうなーと思い手元のVMで予習していた<a href="http://blog.tokumaru.org/2017/02/wordpress-4.7.1-Privilege-Escalation.html" target="_blank" rel="external">WordPress4.7.1の権限昇格の脆弱性</a>が存在していたので、<a href="https://fossies.org/diffs/wordpress/4.7.1_vs_4.7.2/wp-includes/class-wp-post.php-diff.html" target="_blank" rel="external">このあたり</a>を参考にWordPressのソースコードを改変しました。多分、ちゃんとこの段階で作業をしたECサイトについては攻撃を先回りで回避できたと思います。<br>ここまでは比較的平和でしたが、お昼を食べ終わってしばらくしてからバックドアが置かれていたり、修正漏れのあったサイトが改ざんされたりしました。不要なディレクトリの移動などはこの辺りで行ったと思います。<br>この後個人情報漏洩()があったりしましたが、MPの方が教えてくれた「OSコマンドインジェクション脆弱性を含むサイト」のソースコードを修正したり、ところどころCSSがおかしくて見にくくなっているサイトの修正を行ったりしました。<br>競技終了の数十分前からはMP製品画面、実際の画面、端末などとにらめっこするまさに死活監視を行っていました。</p>
<h2 id="良かったこと"><a href="#良かったこと" class="headerlink" title="良かったこと"></a>良かったこと</h2><p>脆弱性を予習していて良かったです。サイトが改ざんされたりシステムが壊されたときにどうしてそれが起こってしまったのか、あたりがつくかつけられないかでかなり気持ち的なところに差があったと思います。予習では実際に自分で環境を作り、脆弱性を検証し、ソースコードを修正して攻撃が通用しないことを確認、というところまでの一連の流れをやっていたので、本番で出たときもそれなりにスムーズに作業できたと思います。<br>また、お昼のバーガーが美味しかった点が挙げられます。</p>
<h2 id="悪かったこと"><a href="#悪かったこと" class="headerlink" title="悪かったこと"></a>悪かったこと</h2><p>サーバーのパス変更や脆弱性修正が漏れていた所がありました。中盤～になってその穴を突かれたりしてしまったので、競技環境資料をよく見ながら最初の段階で注意深く確認を行うべきだったと思います。また、脆弱性だけでなくサービス自体の使用を通してノウハウを増やしておけばよかったなと思いました。WordPressなど普段使わないサービスをもう少し触っておけば、管理者パスワードの変更やユーザー登録ボタンの削除などの作業がより円滑になったと思います。この他にも設定ファイルで失敗したり、コマンド慣れが足りなかったりとまだまだ技術的な部分やそうでない部分で自分は未熟だなぁと感じる点が多くありました。<br>また、お昼のバーガーを急いで食べてしまった点が挙げられます。</p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>チームメンバーに恵まれ、MP(製品と担当者の方々)に恵まれ、グランプリという結果をいただきました。10時間という競技時間は長かったようで今思えば短かったですがその中で得た学びはとても多かったし、何より楽しかったです。Softening Dayでも多くの方とお話させていただけたり、SecHack365など他イベントでも一緒に参加していてまだお話したことがなかった方々とも今回の大会をきっかけに交流できたりしました。<br>貴重な体験をさせてくださり、本当にありがとうございました。</p>
<img src="/blog/2017/06/26/h1010cf.png" alt="Hardening 1010 Cash Flow参加できて良かったです、ありがとうございました!" title="Hardening 1010 Cash Flow参加できて良かったです、ありがとうございました!">
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;去る23日、沖縄コンベンションセンターで10回目(記念回!)の「&lt;a href=&quot;https://wasforum.jp/2017/04/hardening-1010-cash-flow/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hardening 1010 Cash Flow&lt;/a&gt;」が開催されており、そこに参加しました。チーム「術中Hack」のメンバーとして参加し、グランプリをいただきました。記念回に初参加で参戦できただけでなく、10時間という今までにない競技時間を体験できたり、ラスト(?)沖縄回に参加できたり、グランプリをいただけたりと、本当に参加できて良かったと思えました。運営の皆様、MPの皆様、術中Hackの皆様、その他すべての関係者の皆様に感謝しております。&lt;br&gt;本記事ではチームのことや僕が競技中にやったことのメモを残したいと思います。&lt;/p&gt;
&lt;img src=&quot;/blog/2017/06/26/grand.png&quot; alt=&quot;チーム「術中Hack」グランプリ(੭ ᐕ)੭&quot; title=&quot;チーム「術中Hack」グランプリ(੭ ᐕ)੭&quot;&gt;
    
    </summary>
    
    
      <category term="Hardening" scheme="http://wassan128.github.io/blog/tags/Hardening/"/>
    
  </entry>
  
  <entry>
    <title>picoctf2017で解いたWeb問の話</title>
    <link href="http://wassan128.github.io/blog/2017/05/03/"/>
    <id>http://wassan128.github.io/blog/2017/05/03/</id>
    <published>2017-05-03T09:30:42.000Z</published>
    <updated>2017-05-03T12:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>どうも、EAnbai『Web』担当(自称)です。もうしばらく前の話になってしまいましたが、picoctf2017にいつも通りEAnbaiで参加していました。Web問題メインで取り組んだので、解くことができたWeb問をメモしておきます。</p>
<a id="more"></a>
<h2 id="解いたWeb問たち"><a href="#解いたWeb問たち" class="headerlink" title="解いたWeb問たち"></a>解いたWeb問たち</h2><h3 id="What-Is-Web-level1-20pt"><a href="#What-Is-Web-level1-20pt" class="headerlink" title="What Is Web (level1, 20pt)"></a>What Is Web (level1, 20pt)</h3><p>問題のサイトを見ると、良い感じのサイトが出てきます。ソースコードを見ると下の方にコメントで</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- The first part of the flag (there are 3 parts) is 72b28b258d2 --&gt;</span></div></pre></td></tr></table></figure>
<p>と書かれているので、他のファイル(cssやjs)も探索すると同じようにパーツが出てきてそれらをつなげるとフラグになります。</p>
<h3 id="My-First-SQL-level1-50pt"><a href="#My-First-SQL-level1-50pt" class="headerlink" title="My First SQL (level1, 50pt)"></a>My First SQL (level1, 50pt)</h3><p>ログインフォームが出てくるのでインジェクションするとフラグがもらえます。</p>
<h3 id="TW-GR-E1-ART-level2-100pt"><a href="#TW-GR-E1-ART-level2-100pt" class="headerlink" title="TW_GR_E1_ART(level2, 100pt)"></a>TW_GR_E1_ART(level2, 100pt)</h3><p><code>Oh, sweet, they made a spinoff game to Toaster Wars! That last room has a lot of flags in it though. I wonder which is the right one...? Check it out here.</code></p>
<p>こんな感じの問題文で、リンクを叩くとゲームが始まりました(図1)。クライアント側からは特に有用な情報を見つけられず、問題に付されているヒントを見ると</p>
<p><code>I think this game is running on a Node.js server. If it&#39;s configured poorly, you may be able to access the server&#39;s source.</code></p>
<p>とあり、なるほどpackage.jsonとかが見えるのか、というあたりを付けることができました。実際に「/package.json」としてみるとサーバー側のソースコードがserverディレクトリで管理されており、起動時はserv.jsが実行されていることがわかりました。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">   "prestart": "node server/init.js",</div><div class="line">   "start": "node server/serv.js"</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>ここからはサーバー側のソースコードを読む作業で、serv.jsから辿っていくと複数のソースコードが見えました。<br>ところでこのゲームは1F～4Fのフロア構成になっており、4Fに行くと沢山の旗がキャラクターが取得・使用可能なアイテムとして置いてあります。問題文でも「正しいフラグはどれ？」と聞いているので、それがわかりそうな情報を探すという方針で間違いなさそうです。</p>
<p>さて、ソースコードを少し読むと、このゲームの実装にはsocket.ioが使われており、いくつかあるメッセージの中に「revealFlag」と言うものを見つけることができました。そしてどうやら何らかのアクションを起こせばこのイベントが発生して、PICO_CTF_FLAGという名前の環境変数に書き込まれているフラグを読めるようだ、ということがわかりました。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">outcome.flag = process.env[<span class="string">"PICO_CTF_FLAG"</span>];</div></pre></td></tr></table></figure>
<p>さらにソースコードを見ていくとステージ情報が定義されたファイルが含まれており、その中でも特に例の4Fの旗アイテムを使用すると全アイテムロストもしくはrevealFlag effectが発生する、つまり正しいフラグを取得・使用すれば正解を見ることができ、間違えればその機会が潰えるということがわかりました。使用されたフラグアイテムが正しいフラグであるかはrevealFlagメッセージを処理するコード部</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (entity.items[action.item].effects[i].check == <span class="number">64</span>)</div></pre></td></tr></table></figure>
<p>で確認していることがわかるので、あとは普通にゲームを進めて正しいフラグを取得し、使用するとフラグを見ることができます。</p>
<img src="/blog/2017/05/03/web100.png" alt="図1.Toaster Wars" title="図1.Toaster Wars">
<h3 id="Biscuit-level3-75pt"><a href="#Biscuit-level3-75pt" class="headerlink" title="Biscuit (level3, 75pt)"></a>Biscuit (level3, 75pt)</h3><p>開くと「Access Denied」と言われるのでソースコードを見るとコメントでcookies.sqliteというファイルにクッキーを隠してるから安全だぜと言った趣旨の文章が書かれていて、/private/cookies.sqliteにアクセスするとダウンロードすることができます。この中身をsqliteを使って見てみるとそれっぽい文字列が入っているのが見えるのでこれを問題サイトのIDというクッキーを書き換えて設定、再アクセスするとフラグがもらえます。</p>
<h3 id="A-Happy-Union-level3-110pt"><a href="#A-Happy-Union-level3-110pt" class="headerlink" title="A Happy Union (level3, 110pt)"></a>A Happy Union (level3, 110pt)</h3><p>開くとLogin/Registerボタンが出てきて、流石にlevel1の問題のようには行きません。とりあえずhogeみたいな適当なアカウントをRegisterしてLoginすると何かポストできるページが出てきます(図2)。</p>
<img src="/blog/2017/05/03/web110_1.png" alt="図2.ログイン後のページ" title="図2.ログイン後のページ">
<p>問題文からSQLのunionを使ったSQLiであることが推察でき、色々試しているうちにユーザー登録時にSQL命令を混入させることでログイン後のページに情報を表示させることができそう、ということがわかりました。ということでまとめると</p>
<ol>
<li>SQL(union selectでadminのpassを取得するようなものを作る)を混入させたユーザー名でユーザーを新規登録する</li>
<li>1で作成したユーザーでログインする</li>
<li>ログイン後画面にadminのpass(フラグ)が表示されて優勝</li>
</ol>
<p>という手順で解けます。<br>しかしまだどのtableにユーザー情報が格納されているかわからないので、unionを使って情報収集します。ここで問題文の<code>I like lite sql:)</code>という部分からデータベースにsqliteが採用されていることが窺えるので、sqlite_masterテーブルから情報を抜き出します(図3)。これでusersテーブルと言うものが存在することがわかりました(ユーザー登録時のSQLによってエラー情報を表示(サーバー側でエラーを吐くようになっている)させ、ポスト部分のtable名「posts」をリークし、そこからusersテーブルの存在をエスパーする方法もある)。あとは前述の手順に従ってusersテーブルから情報を抜き出すSQLを混入したユーザーでログインすればフラグが貰えそうです。</p>
<img src="/blog/2017/05/03/web110_2.png" alt="図3.usersテーブルから情報を抜き出せば良さそう" title="図3.usersテーブルから情報を抜き出せば良さそう">
<p>詰まったところとしてはユーザー名部分でSQLを組み立てる時にシングルクォーテーションを意識しなければならない点、カラム数を合わせる必要がある点でした。前者はコメントでは回避できなかったので、pass取得のための命令の後に</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">where user='admin</div></pre></td></tr></table></figure>
<p>を付け加えて回避しました。後者は最終的にnullをselectのリストに加えることで回避しました。この手順を踏むと無事フラグを取得することができました(図3)。unionベースSQLiの内容把握にあたり、<a href="http://www.sqlinjection.net/union/" target="_blank" rel="external">このあたり</a>などを参考にしました。</p>
<img src="/blog/2017/05/03/web110_3.png" alt="図4.フラグがもらえた" title="図4.フラグがもらえた">
<h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>気合いを入れて解いたのはTW_GR_E1_ARTとHappy Unionで、それ以外の問題は割りとサクっといきました(というかTWはゲームを進めてフロア4まで行くのが普通に楽しかったので遊んでしまった)。特にHappy Unionが解けた時はEAnbai『Web』担当を自称しておきながら今まであまりちゃんとWeb問を解けなかったので、嬉しかったです。ただLevel3の残り2問と4のWeb問などまだまだ解けていないものがあるので、精進します。</p>
<p>あとpwnもそろそろちゃんとできるようになりたいので、チーム内でpwnable.krの問題を解いたりしていますがpicoctfの問題も難易度が良い感じなのでwriteupを適宜見ながらやっていきたいです。</p>
<p>以上です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;どうも、EAnbai『Web』担当(自称)です。もうしばらく前の話になってしまいましたが、picoctf2017にいつも通りEAnbaiで参加していました。Web問題メインで取り組んだので、解くことができたWeb問をメモしておきます。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://wassan128.github.io/blog/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>AlexCTFに出て少し問題を解いた話</title>
    <link href="http://wassan128.github.io/blog/2017/02/06/"/>
    <id>http://wassan128.github.io/blog/2017/02/06/</id>
    <published>2017-02-06T08:54:02.000Z</published>
    <updated>2017-05-03T11:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2017/02/03 19:00~2017/02/06 17:00(日本時間)、AlexCTFがアレクサンドリア大学主催で開催されていました。例によってチームEAnbaiの一員として参加し、チームとしては1190ptで215位(/1029?)で終了しました。以下、解いた/取り組んだ問題について簡単に書きます。</p>
<a id="more"></a>
<h2 id="解いた問題"><a href="#解いた問題" class="headerlink" title="解いた問題"></a>解いた問題</h2><h3 id="Reversing-1-50pt"><a href="#Reversing-1-50pt" class="headerlink" title="Reversing 1 (50pt)"></a>Reversing 1 (50pt)</h3><p>Stringsコマンドで文字列を見るだけで終わり。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ strings gifted</div><div class="line">(中略)</div><div class="line">ALEXCTF&#123;Y0u_h4v3_45t0n15h1ng_futur3_1n_r3v3r5ing&#125;</div><div class="line">(中略)</div></pre></td></tr></table></figure></p>
<p>Flag: ALEXCTF{Y0u_h4v3_45t0n15h1ng_futur3_1n_r3v3r5ing}</p>
<h3 id="Forensic-3-150pt"><a href="#Forensic-3-150pt" class="headerlink" title="Forensic 3 (150pt)"></a>Forensic 3 (150pt)</h3><p>USB通信のキャプチャが渡されるのでWiresharkで確認する。どうやらUSB_BULK outというのが怪しく、データが入ってるっぽい。いくつかあるが、その中にそれらしきものを見つけた。</p>
<img src="/blog/2017/02/06/fore21.png" alt="Wiresharkで開いたところ" title="Wiresharkで開いたところ">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">89:50:4e:47:0d:0a:1a:0a:00:00:00:0d:49:48:44:.....</div></pre></td></tr></table></figure>
<p>先頭2byteを見るとどうやらpngっぽいのでファイルにして中身を見る。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> struct</div><div class="line">data = <span class="string">"89504e470d0a1a0a0000000d...(省略)"</span></div><div class="line">raw = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">2</span>):</div><div class="line">	raw.append(int(<span class="string">"0x"</span> + data[i:i + <span class="number">2</span>], <span class="number">16</span>))</div><div class="line"></div><div class="line">f = open(<span class="string">"fore2.png"</span>, <span class="string">"wb"</span>)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> raw:</div><div class="line">	f.write(struct.pack(<span class="string">"B"</span>, x))</div><div class="line"></div><div class="line">f.close()</div></pre></td></tr></table></figure>
<img src="/blog/2017/02/06/fore22.png" alt="flag" title="flag">
<p>Flag: ALEXCTF{SN1FF_TH3_FL4G_OV3R_USB}</p>
<h3 id="Trivia-2-20pt"><a href="#Trivia-2-20pt" class="headerlink" title="Trivia 2 (20pt)"></a>Trivia 2 (20pt)</h3><p><div style="text-align: left; font-size: 10pt; font-family: メイリオ; background: #EEE; padding: 1em; font-style: italic;"><br>    <span style="font-size: 12pt; color: #999">問題文</span><br>    SSL 0day<br>    It lead to memory leakage between servers and clients rending large number of private keys accessible. (one word)<br></div><br>ALEXCTF{Heartbleed}?しかしこれが通らない。ここで問題文末尾の「one word」というのが引っかかる。フラグフォーマットはALEXCTF{[A-Za-z0-9_]*}となっているが、それは問題文で指定されていない時に限るとの記述が…。</p>
<p>Flag: Heartbleed</p>
<h3 id="Trivia-4-40pt"><a href="#Trivia-4-40pt" class="headerlink" title="Trivia 4 (40pt)"></a>Trivia 4 (40pt)</h3><p>AlexCTFのページにロゴにフラグが隠されているので探してね、という問題。<br>フラグをテキストで保存し、vimで以下の置換を適用。</p>
<img src="/blog/2017/02/06/tr4.png" alt="「随分文字の小さいアスキーアートだなぁ」というフラグは回収された" title="「随分文字の小さいアスキーアートだなぁ」というフラグは回収された">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/[^(A-Z0-9a-z|&#123;|&#125;)|\n|_]//g</div></pre></td></tr></table></figure>
<p>Flag: ALEXCTF{OUR_LOGO_ROCKS}</p>
<h2 id="取り組んだ問題"><a href="#取り組んだ問題" class="headerlink" title="取り組んだ問題"></a>取り組んだ問題</h2><h3 id="Reversing-4-250pt"><a href="#Reversing-4-250pt" class="headerlink" title="Reversing 4 (250pt)"></a>Reversing 4 (250pt)</h3><p>pycが渡されてフラグを探す問題。<a href="https://github.com/zrax/pycdc" target="_blank" rel="external">pycdc</a>を用いてPythonソースコードを復元した。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cmake</div><div class="line">cmake</div><div class="line">make</div><div class="line">./pycdc unvm_me.pyc</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Source Generated with Decompyle++</span></div><div class="line"><span class="comment"># File: unvm_me.pyc (Python 2.7)</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> md5</div><div class="line">md5s = [</div><div class="line">    <span class="number">0x831DAA3C843BA8B087C895F0ED305CE7L</span>,</div><div class="line">    <span class="number">0x6722F7A07246C6AF20662B855846C2C8L</span>,</div><div class="line">    <span class="number">0x5F04850FEC81A27AB5FC98BEFA4EB40CL</span>,</div><div class="line">    <span class="number">0xECF8DCAC7503E63A6A3667C5FB94F610L</span>,</div><div class="line">    <span class="number">0xC0FD15AE2C3931BC1E140523AE934722L</span>,</div><div class="line">    <span class="number">0x569F606FD6DA5D612F10CFB95C0BDE6DL</span>,</div><div class="line">    <span class="number">0x68CB5A1CF54C078BF0E7E89584C1A4EL</span>,</div><div class="line">    <span class="number">0xC11E2CD82D1F9FBD7E4D6EE9581FF3BDL</span>,</div><div class="line">    <span class="number">0x1DF4C637D625313720F45706A48FF20FL</span>,</div><div class="line">    <span class="number">0x3122EF3A001AAECDB8DD9D843C029E06L</span>,</div><div class="line">    <span class="number">0xADB778A0F729293E7E0B19B96A4C5A61L</span>,</div><div class="line">    <span class="number">0x938C747C6A051B3E163EB802A325148EL</span>,</div><div class="line">    <span class="number">0x38543C5E820DD9403B57BEFF6020596DL</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Can you turn me back to python ? ...'</span></div><div class="line">flag = raw_input(<span class="string">'well as you wish.. what is the flag: '</span>)</div><div class="line"><span class="keyword">if</span> len(flag) &gt; <span class="number">69</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'nice try'</span></div><div class="line">    exit()</div><div class="line"><span class="keyword">if</span> len(flag) % <span class="number">5</span> != <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'nice try'</span></div><div class="line">    exit()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(flag), <span class="number">5</span>):</div><div class="line">    s = flag[i:i + <span class="number">5</span>]</div><div class="line">    <span class="keyword">if</span> int(<span class="string">'0x'</span> + md5.new(s).hexdigest(), <span class="number">16</span>) != md5s[i / <span class="number">5</span>]:</div><div class="line">        <span class="keyword">print</span> <span class="string">'nice try'</span></div><div class="line">        exit()</div><div class="line">        <span class="keyword">continue</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Congratz now you have the flag'</span></div></pre></td></tr></table></figure>
<p>フラグを5文字ずつに区切ってMD5ハッシュにしたものをソースコード内に保持しているので、ソースコード内のmd5ハッシュを復元すれば終わり。<a href="https://hashkiller.co.uk/md5-decrypter.aspx" target="_blank" rel="external">onlineのデコードサイト</a>でdecryptしたものをつなげて投げたものの通らず、何でだろう…と思っていたら7つ目のハッシュが1文字足りていなかった。チームSlackに投げたところ先輩が解いてくれたので結果オーライ(とは言え悔しいので精進します(´・ω・｀))。頭に0をつけるだけの発想がどうして出てこなかったんだろう…。</p>
<h3 id="Trivia-3"><a href="#Trivia-3" class="headerlink" title="Trivia 3"></a>Trivia 3</h3><p>僕「CA issueって言ってるし何か問題あるんじゃね！？」<br>sio「issuedだと『発行する』の意になるってよ」<br>僕「魔剤！？(ｶﾁｶﾁ…)letsencrypt」</p>
<p>＞ フラグだった ＜</p>
<p>問題文適当に読みすぎた。英語勉強し直したほうが良い。</p>
<h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>これはCTFに限らず、自分で箱を作ってその中で考えるのではなく、試せるだけの可能性を試すことが大事だと感じました(特にfore3)。<br>また、暗号系の問題を先輩に任せっきりなので、どうにか来年は暗号系もある程度解けるように真面目に数学勉強し直そうと思いました。<br>以上です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;2017/02/03 19:00~2017/02/06 17:00(日本時間)、AlexCTFがアレクサンドリア大学主催で開催されていました。例によってチームEAnbaiの一員として参加し、チームとしては1190ptで215位(/1029?)で終了しました。以下、解いた/取り組んだ問題について簡単に書きます。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://wassan128.github.io/blog/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>SECCON 2016 online CTFで解けた問題とかの話</title>
    <link href="http://wassan128.github.io/blog/2016/12/11/"/>
    <id>http://wassan128.github.io/blog/2016/12/11/</id>
    <published>2016-12-11T08:45:36.000Z</published>
    <updated>2016-12-11T13:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>2016/12/10 15：00～の24時間、SECCON 2016 online CTF(オンライン予選)が開催されました。私はチームEanbai(先輩、同級生、私の三人)として初参加を果たし、チーム得点は500点、順位は1834チーム中159位で終えました。<br>ちなみに12月10日は<a href="http://www.city.nago.okinawa.jp/9/8944.html" target="_blank" rel="external">やんばるツーデーマーチ</a>というウォーキングイベントも開催されていて、例年通り私は40kmコースに友人たちと4：00～15：30まで参加してからのSECCONログインだったので身体も頭もくたくたになりましたが、どちらも楽しかったです。<br>では早速、解けた問題のWriteupをば。</p>
<img src="/blog/2016/12/11/eanbai.png" alt="Eanbaiで参加しました" title="Eanbaiで参加しました">
<a id="more"></a>
<h2 id="Anti-Debugging-Binary-100"><a href="#Anti-Debugging-Binary-100" class="headerlink" title="Anti-Debugging(Binary - 100)"></a>Anti-Debugging(Binary - 100)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Anti-Debugging</div><div class="line">Reverse it.</div></pre></td></tr></table></figure>
<p>シンプルな問題文にbinというファイルが添えられていました。fileコマンドで何のファイルなのか確認すると</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file</div><div class="line"><span class="function">bin: <span class="title">PE32</span> <span class="title">executable</span> (<span class="title">console</span>) <span class="title">Intel</span> 80386, <span class="title">for</span> <span class="title">MS</span> <span class="title">Windows</span></span></div></pre></td></tr></table></figure>
<p>とのことだったので、ひとまず拡張子をexeに変えて実行します。すると、「Input password &gt;」と表示されて入力待ち状態になります。適当に「hogehoge」とか打つと「password is wrong.」と怒られてしまうので、ひとまず次の手順に従ってパスワードを入手しました。</p>
<ol>
<li>「Input password &gt;」をセットしている部分のアドレスを確認</li>
<li>ollydbgで1で調べたアドレスにブレークポイントをセット</li>
<li>ステップ実行していき、入力値を検査している箇所に来たらレジスタの値を確認</li>
</ol>
<p>1はIDAで確認しました。この時ついでにIDAが吐いてくれるアセンブリのグラフビューを眺めてbinがどのようなプログラムになっているのか、大きなプログラムでもなかったので大まかに把握しました。2、3までやったところで、パスワードが「I have a pen.」であることがわかりました。流行を抑えていくスタイルなんですね。正しいパスワードがわかったのでもう一度プログラムを(デバッガ無しで)普通に起動して打ち込んでやると今度は「Your password is correct.」と言われてプログラムは終了します。やったぜ！…ところでフラグは?デバッガでどうなっているのかもう一度見ていきます。</p>
<img src="/blog/2016/12/11/obtain_password.png" alt="パスワードは「I have a pen.」" title="パスワードは「I have a pen.」">
<p>そして、ここから問題名にもある通りAnti-debugとの戦いになります。ollydbgで掴んだ状態でもう一度I have a pen.を唱えると今度は「But detected debugger!」とも言われるようになりました。該当部分のコードを確認すると、どうやらIsDebuggerPresent関数を使って自分自身がデバッガに掴まれていることを検知してフラグを守っている健気な姿が見られました。</p>
<img src="/blog/2016/12/11/ntglobalflag.png" alt="NtGlobalFlag" title="NtGlobalFlag">
<p>これを突破するためにOlly AdvancedというAnti-Anti-debugを実装したプラグインがあったので、それを使おうと思ったのですが、IsDebuggerPresentの次のNtGlobalFlag隠しを有効にしても突破できず、その後は結局手動でバイナリを書き換えていきました。ちゃんと読まないでプログラムのバイナリを書き換えるのはあまりよろしくないですが、Anti-debugに関しては少しの命令を実行して、その結果レジスタにロードされる値などを元に検出を行っているものが大半なので、cmp命令の部分をnopで埋めればプログラムの大元の動作を破壊することなく突破できてしまいます。<br>例えば、先程のNtGlobalFlagもcmp命令をなかったことでJNZ命令に引っかからなくなり、スキップできます。少なくとも今回のバイナリに関しては手元で試した全ての検出手法がこのcmp2nop(勝手にそう呼んでる)でスキップできました。</p>
<img src="/blog/2016/12/11/ntglobalflag_ok.png" alt="cmp2nop!" title="cmp2nop!">
<p>ただ最後の最後、(暗号化された)フラグっぽい文字列がollydbgでも見えるようになってきたところで0と1を比較して違ったらフラグ見せない、みたいな処理があったのでそこは比較結果が一致になるように改変して突破しました。</p>
<img src="/blog/2016/12/11/almost_flag_get.png" alt="フラグっぽいやつが見える" title="フラグっぽいやつが見える">
<p>全ての検出機構を無事突破し、フラグの復号処理を抜けたら終わりです。ちなみに出てきたフラグを見てもわかりますが、Ascii85というエンコード方式なんだそう。へー。また一つ知見を得ました。<br>以上、pafish.exeが頭に浮かんだ状態で終始取り組んだ問題でした。</p>
<p>Flag: SECCON{check_Ascii85}</p>
<h2 id="Memory-Analysis-Forensics-100"><a href="#Memory-Analysis-Forensics-100" class="headerlink" title="Memory Analysis(Forensics - 100)"></a>Memory Analysis(Forensics - 100)</h2><p>メモリダンプのファイルが渡されて、中身を解析してフラグをくれるWebサイトにアクセスしてね！という問題。ヒントが2つ与えられていて、とりあえず1つ目のヒントに従ってVolatility<a href="http://www.volatilityfoundation.org/" target="_blank" rel="external">(公式サイトリンク)</a>というフォレンジックツールを導入しました。CUIツールで、引数に色々とオプションを付けるとよしなにやってくれる良い奴です。下記の例では、imageinfoオプションを付けて推奨Profileを調べています(このダンプファイルはWinXPSP2x86でやっていけば良さそう。後でも使います)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ volatility.exe -f f.raw imageinfo</div><div class="line">Volatility Foundation Volatility Framework 2.5</div><div class="line">INFO    : volatility.debug    : Determining profile based on KDBG search...</div><div class="line">          Suggested Profile(s) : WinXPSP2x86, WinXPSP3x86 (Instantiated with WinXPSP2x86)</div><div class="line">          (中略)</div><div class="line">           Image date and time : 2016-12-06 05:28:47 UTC+0000</div><div class="line">     Image local date and time : 2016-12-06 14:28:47 +0900</div></pre></td></tr></table></figure>
<p>さて、2つ目のヒントにhostsを見ろと書いてあったので、とりあえずファイルのダンプの仕方を調べてやってみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ volatility.exe -f f.raw filescan | grep hosts</div><div class="line">Volatility Foundation Volatility Framework 2.5</div><div class="line">0x000000000217b748      1      0 R--rw- \Device\HarddiskVolume1\WINDOWS\system32\drivers\etc\hosts</div><div class="line"></div><div class="line">$ volatility.exe -f f.raw dumpfiles -Q 0x000000000217b748 --name -D ./</div><div class="line">Volatility Foundation Volatility Framework 2.5</div><div class="line">DataSectionObject 0x0217b748   None   \Device\HarddiskVolume1\WINDOWS\system32\drivers\etc\hosts</div></pre></td></tr></table></figure>
<p>これでカレントディレクトリにfile.None.0x819a3008.hosts.datみたいなファイルが生成されて、この中身を見ると<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># Copyright (c) 1993-1999 Microsoft Corp.</div><div class="line">#</div><div class="line"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</div><div class="line">#</div><div class="line"># This file contains the mappings of IP addresses to host names. Each</div><div class="line"># entry should be kept on an individual line. The IP address should</div><div class="line"># be placed in the first column followed by the corresponding host name.</div><div class="line"># The IP address and the host name should be separated by at least one</div><div class="line"># space.</div><div class="line">#</div><div class="line"># Additionally, comments (such as these) may be inserted on individual</div><div class="line"># lines or following the machine name denoted by a &apos;#&apos; symbol.</div><div class="line">#</div><div class="line"># For example:</div><div class="line">#</div><div class="line">#      102.54.94.97     rhino.acme.com          # source server</div><div class="line">#       38.25.63.10     x.acme.com              # x client host</div><div class="line"></div><div class="line">127.0.0.1       localhost</div><div class="line">153.127.200.178    crattack.tistory.com</div></pre></td></tr></table></figure></p>
<p>hostsですね。注目すべきは最後の行のcrattack.tistory.comというやつ。果たして本当にそうでしょうか？と33分探偵ばり(ネタが古い)にnslookupすると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">名前:    crattack.tistory.com</div><div class="line">Addresses:  175.126.170.70</div><div class="line">          175.126.170.110</div></pre></td></tr></table></figure>
<p>ほらね。やっぱり何かありそうです。問題文でも偽のアクセスがどうのこうのと言ってるので、方針は良さそうです。ここからはコマンドリファレンスとにらめっこして情報を幾つか見ましたが、最終的に答えにたどり着けたのは「<a href="https://github.com/volatilityfoundation/volatility/wiki/Command%20Reference#iehistory" target="_blank" rel="external">iehistory</a>」というオプションでした。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ volatility.exe -f f.raw iehistory | grep crattack.tistory.com</div><div class="line">Volatility Foundation Volatility Framework 2.5</div><div class="line">Location: http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div><div class="line">Location: Visited: SYSTEM@http://crattack.tistory.com/rss</div><div class="line">Location: Visited: SYSTEM@http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div><div class="line">Location: Visited: SYSTEM@http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div><div class="line">Location: http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div><div class="line">Location: Visited: SYSTEM@http://crattack.tistory.com/rss</div><div class="line">Location: Visited: SYSTEM@http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div><div class="line">Location: Visited: SYSTEM@http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div><div class="line">Location: :2016120620161207: SYSTEM@http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div><div class="line">Location: :2016120620161207: SYSTEM@:Host: crattack.tistory.com</div><div class="line">Location: :2016120620161207: SYSTEM@http://crattack.tistory.com/entry/Data-Science-import-pandas-as-pd</div></pre></td></tr></table></figure>
<p>このサイト自体はアクセスしても特にフラグらしいものは得られませんでしたが、iehistoryで出てきた/Data-Science-import-pandas-as-pdというやつにアクセスするとファイルが落ちてきて、それをテキストエディタとかで読むとフラグが書いてある、というオチでした。</p>
<p>これらの作業をするにあたって、<a href="http://downloads.volatilityfoundation.org/releases/2.4/CheatSheet_v2.4.pdf" target="_blank" rel="external">Volatility CheatSheet_v2.4.pdf</a>と<a href="https://github.com/volatilityfoundation/volatility/wiki/Command%20Reference#iehistory" target="_blank" rel="external">Command Reference(at github)</a>を大いに活用しました。</p>
<p>Flag: SECCON{_h3110_w3_h4ve_fun<em>w4rg4m3</em>}</p>
<h2 id="その他取り組んだ問題1-VoIP-Forensics-100"><a href="#その他取り組んだ問題1-VoIP-Forensics-100" class="headerlink" title="その他取り組んだ問題1: VoIP(Forensics - 100)"></a>その他取り組んだ問題1: VoIP(Forensics - 100)</h2><p>pcapファイルが渡されて、中にVoIP電話の音声パケットデータが入っているので、それを聞き取る問題。これはEnglishをlistenする問題で英語パーフェクトマスター!wの私は「余裕やんけ」と言いながら聞き取った「SECCON{9001IBR}」をポストするも無残に散りました。正しいフラグは「SECCON{9001I<strong>V</strong>R}」。チームメンバーの先輩が無事得点してくれました。良かったです。</p>
<h2 id="その他取り組んだ問題2-PNG-over-Telegraph-Crypto-300"><a href="#その他取り組んだ問題2-PNG-over-Telegraph-Crypto-300" class="headerlink" title="その他取り組んだ問題2: PNG over Telegraph(Crypto - 300)"></a>その他取り組んだ問題2: PNG over Telegraph(Crypto - 300)</h2><p>愉快な動きをするSECCON TOWER(<a href="https://www.youtube.com/watch?v=Y6voaURtKlM&amp;feature=youtu.be" target="_blank" rel="external">YouTubeへのリンク</a>)の動きからアルファベットを読み出して、その結果をどうにかデコードしてPNGファイルを出力する問題。最初の趣旨説明部分で21文字(ただし.(ピリオド)含む)がわかるように説明してくれていて、それを表にまとめるとその他のわかっていない6文字もなんとなく推察できるようになっていました。ただ、とにかく動画が長くて、色々しんどい問題だ…ってなったところで解くのをやめてしまいました。面白かったので時間があったらやってみようかなという感じです。</p>
<img src="/blog/2016/12/11/pngovertel.png" alt="対応表を作っていた。赤文字部分は冒頭の英文に出てこなかったために判明しなかったので予想した文字" title="対応表を作っていた。赤文字部分は冒頭の英文に出てこなかったために判明しなかったので予想した文字">
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>上に挙げた以外の問題もいくつか触ったりしましたが、pwnの問題もflag.txtという文字がスタック上に見えるのに手が届かない、そういう感じで悔しかったです。あとWeb問も解けなかったので、この辺できるようになりたいなと思いました。</p>
<h2 id="そういえば"><a href="#そういえば" class="headerlink" title="そういえば"></a>そういえば</h2><p>来週は<a href="http://www.security-camp.org/minicamp/okinawa2016.html" target="_blank" rel="external">セキュリティミニキャンプ in 沖縄</a>ですね。</p>
<p>以上です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;2016/12/10 15：00～の24時間、SECCON 2016 online CTF(オンライン予選)が開催されました。私はチームEanbai(先輩、同級生、私の三人)として初参加を果たし、チーム得点は500点、順位は1834チーム中159位で終えました。&lt;br&gt;ちなみに12月10日は&lt;a href=&quot;http://www.city.nago.okinawa.jp/9/8944.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;やんばるツーデーマーチ&lt;/a&gt;というウォーキングイベントも開催されていて、例年通り私は40kmコースに友人たちと4：00～15：30まで参加してからのSECCONログインだったので身体も頭もくたくたになりましたが、どちらも楽しかったです。&lt;br&gt;では早速、解けた問題のWriteupをば。&lt;/p&gt;
&lt;img src=&quot;/blog/2016/12/11/eanbai.png&quot; alt=&quot;Eanbaiで参加しました&quot; title=&quot;Eanbaiで参加しました&quot;&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://wassan128.github.io/blog/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>KOSENセキュリティ・コンテスト2016に参加した話</title>
    <link href="http://wassan128.github.io/blog/2016/12/04/"/>
    <id>http://wassan128.github.io/blog/2016/12/04/</id>
    <published>2016-12-04T12:17:02.000Z</published>
    <updated>2017-05-04T03:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>　ちょうど一週間前の11月27日(日)に「KOSENセキュリティ・コンテスト2016」というコンテストが開催され、私は4人からなる最南端の高専生チームEAnbaiの一員として参加した。コンテスト概要はサイバーな雰囲気漂うデザインの<a href="https://sckosen2016.kochi-ct.ac.jp/" target="_blank" rel="external">公式サイト</a>を参照されたい。運営・参加者共に初めての試みだった本コンテスト。記憶に新しいうちに、参加記とは言えないだろう参加記をここに書き残したい。ちなみに私達のチームは31チーム参加中7位タイで競技を終えた。タイというのも、コンテストのランキング表は最終得点日時に基づく時系列が考慮されていたのだ。時系列も考慮した場合の私達の最終順位は11位であることも、ランキング警察訪問に備えて付しておこう。</p>
<p>(追記)しばらくして大会に使用された環境が異なっていたことが運営の方の調査によって明らかになり、その違いによってランキング時に2つの部門に分けられました。その結果とあるファイルがあった部門において3位となり、表彰状をいただきました。</p>
<a id="more"></a>
<h2 id="競技の一週間程度前～競技前日"><a href="#競技の一週間程度前～競技前日" class="headerlink" title="競技の一週間程度前～競技前日"></a>競技の一週間程度前～競技前日</h2><p>　この頃から運営からのメールでの連絡が増え始め、一歩一歩確実に戻ることなく近づいてくる競技の足音とプロ参加者の自己紹介に震えながら、更新されていく情報に耳を傾けていた。競技数日前、SSHでの競技サーバー接続テスト用の情報が公開された。各々好みのターミナルを起ち上げ、指定されたサーバーアドレスを打ち込み、研究室の回線を介して正常にサーバーへ接続できることを確認した。北は北海道、南は我らが沖縄県からの参加がある本コンテストだが、このようにインターネット経由で参加できるオンライン形式のコンテストなので参加は容易い。勉強会や現地会場でのみ執り行われる大会には地理的ハードルが高い私達でも、オンラインの大会ならば亜光速で現地入りできるのだから、通信技術には頭が上がらない。<br>　この数日後、予告されていた事前課題が解放された。初めての亜光速現地入りの時の入口から少し時間を進めたところから入れば、それにたどり着けるようだ。既に学生寮の自室へ戻っていた私は、研究室から亜光速現地入りして現場検証を行うチームメンバーからの報告を見ていた。翌日、チームメンバーの報告どおり「iotcar.py」、「iotcar」の存在をそれぞれ自分の目で確かめた。どうやらiotcarの方は<code>python iotcar.py</code>とした時と同じ挙動をするものらしい。運営からSlackを通じて提供されている事前課題の情報と照らし合わせつつ、それを実行し、コマンドをUDPで送信し挙動を見ることを行った――こう書くと何だか大層なことをやってのけているように思えるが、実際は運営から渡されたサンプル通信プログラムをサーバー上に新たなファイルとして作成して実行したにすぎない。<br>　少なくともここまでの作業は全国の参加チームで行われたことだろう。私達のチームではこのリモートブラックボックスiotcar.pyが本番、どのように作用してくるのかを考えていた。パラメータを指定してコマンドを送信すること、コマンドの仕様がそれぞれわかっていたが、事前課題として示されていたプログラムに基づいたコマンドの送信方法では、本番数多のコマンドを送信することを予想するとあまりにも効率が悪いと判断した。そこで以下のようなプログラムを作成した。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> array</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">HOST = <span class="string">"localhost"</span></div><div class="line">PORT = <span class="string">"PORT_NUM"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genCmd</span><span class="params">()</span>:</span></div><div class="line">    cmd = []</div><div class="line">    kind = &#123;</div><div class="line">        <span class="string">"u"</span>: &#123;</div><div class="line">            <span class="number">1</span>: <span class="string">u"1: スポーツモード"</span>,</div><div class="line">            <span class="number">2</span>: <span class="string">u"2: ハンドル舵角"</span>,</div><div class="line">            <span class="number">3</span>: <span class="string">u"3: ブレーキ量"</span>,</div><div class="line">            (中略)</div><div class="line">            <span class="number">8</span>: <span class="string">u"8: エンジン"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"a"</span>: &#123;</div><div class="line">            <span class="number">1</span>: <span class="string">u"1: ウィンドウ動作"</span>,</div><div class="line">            <span class="number">2</span>: <span class="string">u"2: ウィンドウロック"</span>,</div><div class="line">            <span class="number">3</span>: <span class="string">u"3: エアコン設定温度"</span>,</div><div class="line">            (中略)</div><div class="line">            <span class="number">18</span>: <span class="string">u"18: 4WD"</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"># append</span></div><div class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> [<span class="number">0xf0</span>, <span class="number">0x40</span>, <span class="number">0x01</span>]:</div><div class="line">        cmd.append(val)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"[step1]カテゴリ選択"</span></div><div class="line">    opt1 = raw_input(<span class="string">"運転動作orアクセサリ(u | a):"</span>)</div><div class="line">    cmd.append((<span class="keyword">lambda</span> x: <span class="number">0x10</span> <span class="keyword">if</span> x == <span class="string">'u'</span> <span class="keyword">else</span> <span class="number">0x20</span>)(opt1))</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"[step2]コマンド選択"</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(kind[opt1]) + <span class="number">1</span>):</div><div class="line">        <span class="keyword">print</span> kind[opt1][i]</div><div class="line">    opt2 = raw_input(<span class="string">"コマンド番号(数字)"</span>)</div><div class="line">    cmd.append(int(opt2))</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"[step3]データ1"</span></div><div class="line">    opt3 = raw_input(<span class="string">"データ#1:"</span>)</div><div class="line">    cmd.append(int(opt3, <span class="number">16</span>))</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"[step4]データ2"</span></div><div class="line">    opt4 = raw_input(<span class="string">"データ#2:"</span>)</div><div class="line">    cmd.append(int(opt4, <span class="number">16</span>))</div><div class="line"></div><div class="line">    <span class="comment"># append2</span></div><div class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0xf7</span>]:</div><div class="line">        cmd.append(val)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"[genCmd]cmd generated: %s"</span> % cmd</div><div class="line">    <span class="keyword">return</span> cmd</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pushCmd</span><span class="params">(cmd)</span>:</span></div><div class="line">    serv = (HOST, PORT)</div><div class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</div><div class="line">    client.sendto(array.array(<span class="string">"B"</span>, cmd), serv)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[%s]cmd sent."</span> % datetime.now().strftime(<span class="string">"%H:%M:%S"</span>)</div><div class="line">    client.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    cmd = genCmd()</div><div class="line">    pushCmd(cmd)</div></pre></td></tr></table></figure>
<p>コマンド送信を簡略化するためのこのプログラム利用者は天才であることを前提に作成したので、使い勝手はあまり考慮されていないが本番でどの程度このプログラムが力を発揮できるのかわからない中だったので、まあひとまずといったところだ。ここがEAnbaiによるiotcarピークだった。</p>
<h2 id="競技当日"><a href="#競技当日" class="headerlink" title="競技当日"></a>競技当日</h2><p>　結論から言うと、EAnbaiはiotcarを得点につなげることができなかった(問題の内訳が公開されていない今、本当に獲得できていないのかは定かではないが恐らくそうだろう)。コンテストの加点は5分に一度運営側で脆弱性の修正が行われたことが確認された段階で行われる仕組みになっており、自分たちのどの作業が自分たちの得点になったのかは即時に判断できない場合がある。ひとまずサーバーにアクセスして一体どんな脆弱性やおかしな設定が与えられているのか、確認するところから始めるしかない。本番環境のサーバーにアクセスしてまずはじめに、事前課題の洞窟と同じ風景が広がっているのが一目見えた。しかし今回は事前環境とは違う点がある。iotcar.pyを編集できるのだ。その変化に満足しながらひとまず<code>python iotcar.py</code>とする。しかし期待に反してプログラムはSyntax Errorを話すのだった。ここからもう一人のチームメンバーと共同でのiotcar.pyデバッグが始まる。これに没頭しすぎたのは今考えると良くなかった。もう少し編集可能になった宝について、その使いみちを検討すべきだったが、満足に実行できるようにすることを優先して時間をかけすぎた感が否めない。しかしもちろん無駄な作業だったわけではない。構文エラー、変数名の誤り等いくつかのエラーを乗り越えてiotcar.pyは正常に動作した。<br>　この作業と並行して他のチームメンバー2人によるサーバー内探索が進んでいた。不審なユーザーがJoeアカウントで登録されていたのを修正したり、設定不備なファイルの修正を行ったりと、いくつかの得点を重ねていた。root権限に飢えながら行われたこれらの幾つかの作業が最終得点700点の全てだと思われる。一方、前日に用意したコマンド送信用のプログラムも正常に動作し、iotcar.pyにコマンドが送られ、ファイルに書き込まれ、Webページの表示からWarningが消えていくのを見て私はある程度の満足感を覚えていた。しかし、くどいようだがこれらの作業は得点には繋がらなかった。アプローチの仕方が間違っていて、本質的な解決に至っていなかったからだ。ここからは苦しい時間が続いた。/var/www内のPHPファイルの内容が明らかに怪しいのはわかっていて、ソースコードを読むことでどのような脆弱性があって、Webインターフェースでの実際の作用まである程度想定できていた。足りなかったのはroot権限だった。編集権限までは与えられていなかったこれらの問題児に手を付けたくてもつけられない、どうにかして糸口を見つけ出したい、そんな状況が続いた――直ぐ側にある宝に気づけないまま。<br>　「灯台下暗し」とは、まさにあのことだったのだろう。この件に関しては後日運営から追加情報が出次第、追記することにするがいやはや、今になってみれば何故あの大きな大きな宝に気づくことができなかったのだろうか、と悔やまれるばかりだ。宝があったとかなかったとか言う議論とは別の次元に、私達がその宝に気づけなかったという事実はある。この悔しさをバネに、次の機会では大きい魚を逃さぬように目を凝らさねばならないと誓ったのだった。</p>
<h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>　悔しさが残る競技となった一方、楽しかったという感情も大きかったです。きっと、セキュリティミニキャンプに参加して、セキュリティを勉強し始めた約1年前の自分では知識不足で何からどう手を付けていいのかすらわからなかったと思います(当時はLinuxすらまともに触ったことがなかった)。朝10時から始まり15時半まで5時間半続いた競技時間、数字だけ見ると長いように思えますが実際にはあっという間でした。12時頃に寮食を食べに食堂まで行く時間も惜しくて、普段の数倍のスピードでご飯を食べながら/etc/shadowをどう開くかGoogle検索片手に考えていたので何を食べていたのかもよく思い出せないですが、これも良い思い出です。<br>　今回のコンテストはCTFというよりはHardening色が強い競技形態だったと思います。といっても僕はHardeningへの参加経験がなく、今回をきっかけに参加してみたい気持ちが今まで以上に強くなりました。CTFなどのコンテスト自体の参加経験も浅いので、今後も研鑽を積みつつ顔を出していきたいです。<br>　最後になりますが、運営の皆様方、一緒に参加したチームメンバー、当日学校に来てくださった担当の先生、本当にありがとうございました。雑多な記事になってしまいましたが、今回は以上です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;　ちょうど一週間前の11月27日(日)に「KOSENセキュリティ・コンテスト2016」というコンテストが開催され、私は4人からなる最南端の高専生チームEAnbaiの一員として参加した。コンテスト概要はサイバーな雰囲気漂うデザインの&lt;a href=&quot;https://sckosen2016.kochi-ct.ac.jp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;公式サイト&lt;/a&gt;を参照されたい。運営・参加者共に初めての試みだった本コンテスト。記憶に新しいうちに、参加記とは言えないだろう参加記をここに書き残したい。ちなみに私達のチームは31チーム参加中7位タイで競技を終えた。タイというのも、コンテストのランキング表は最終得点日時に基づく時系列が考慮されていたのだ。時系列も考慮した場合の私達の最終順位は11位であることも、ランキング警察訪問に備えて付しておこう。&lt;/p&gt;
&lt;p&gt;(追記)しばらくして大会に使用された環境が異なっていたことが運営の方の調査によって明らかになり、その違いによってランキング時に2つの部門に分けられました。その結果とあるファイルがあった部門において3位となり、表彰状をいただきました。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://wassan128.github.io/blog/tags/ctf/"/>
    
      <category term="misc" scheme="http://wassan128.github.io/blog/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>Windows Media Playerのスキンを作る話</title>
    <link href="http://wassan128.github.io/blog/2016/08/26/"/>
    <id>http://wassan128.github.io/blog/2016/08/26/</id>
    <published>2016-08-26T07:01:34.000Z</published>
    <updated>2016-08-26T11:24:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Windows Media Player(以下、WMP)はスキンを何らかの手段で入手して、自分の好きな見た目に変更することができます。もちろん自分で作ることもでき、xml/javascriptを用いて比較的簡単にできるので、やっていきます。僕はn年前にiphon…1ph0n3の4sをモデルにしたものを作ったことがあり、今回はそれをip..1ph0n3の5sモデルで作りなおそうと思います。なぜ6系ではないかというと僕の携帯が5sだからです(どうでもいい)。ちなみに作ったものはできればここでダウンロードできるようにしたいのですが、現在著作権利用(林檎社公式音楽再生アプリのスクショを使用しており、著作権利用ガイドラインを読んだ感じ大丈夫ではあると思うが念のため)に関する確認の途中なので、ダウンロードファイルの設置はそこら辺が明確になり次第ということにします。では、やっていきます。</p>
<a id="more"></a>
<h2 id="WMP-Skinについて"><a href="#WMP-Skinについて" class="headerlink" title="WMP Skinについて"></a>WMP Skinについて</h2><p>世の中の大半のスキン内部はおおよそ以下のようなファイル構成になって(いると思)います。</p>
<ul>
<li>wms(必須)</li>
<li>javascript(任意)</li>
<li>画像素材(任意)</li>
</ul>
<p>wmsファイルの中身はxmlで、この中で見た目を記述していきます。実際にスキンをリリースする際はこれらのファイルをまとめてzipに圧縮し、拡張子をwmzに変更すれば良いだけです。スキンを適用するときはwmzファイルをダブルクリックすると、ダウンロード・適用画面が出てくるのでポチポチやるとすぐ適用できます。<br>開発中はいちいちwmzにすると面倒なので、wmsファイルをダブルクリック、表示し、更新はWeb開発時のようにF5キーで行います。</p>
<h2 id="まずは画像素材の支度"><a href="#まずは画像素材の支度" class="headerlink" title="まずは画像素材の支度"></a>まずは画像素材の支度</h2><p>1ph0n3(しつこい)の画像は適当にフリーのモックアップイメージを拾ってきます(もちろん自前でも可)。今回は<a href="http://www.actzero.jp/developer/report-5069.html" target="_blank" rel="external">こちら</a>を使わせていただくことにします。次に再生ボタンや次へボタンなどの各パーツをなんとかして調達します。今回は「前へ、次へ、再生、一時停止、プレイリスト表示、WMPライブラリへ戻る、シャッフル、リピート、シャッフル押下時、リピート押下時」を用意しました。ボタンだけでなく、シークバー、ボリュームバー用の画像なども個別に用意しないといけないので結構気合が入ります。<br>画像は背景を透過して描画させることができます。透過したい部分を何か単色で塗りつぶし、それを後で記述するxmlでclipping colorとして指定すれば良いので、とりあえず今回は#FFFF00(黄色)で透過したい部分を塗っておきます。</p>

<h2 id="wms-xml-記述"><a href="#wms-xml-記述" class="headerlink" title="wms(xml)記述"></a>wms(xml)記述</h2><p>HTMLやCSSを書いたことのある人なら、なんとなくイメージが湧きやすいと思いますが、ここはただただ書くだけです。予め意味を持たされているタグを利用しつつ、今回は以下の様な記述を行いました。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">theme</span> <span class="attr">title</span>=<span class="string">"1ph0n3"</span> <span class="attr">copyright</span>=<span class="string">"@wassan128"</span> <span class="attr">author</span>=<span class="string">"wassan128"</span> <span class="attr">scriptfile</span>=<span class="string">"main.js"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">backgroundimage</span>=<span class="string">"bg.png"</span> <span class="attr">clippingColor</span>=<span class="string">"#FFFF00"</span> <span class="attr">titlebar</span>=<span class="string">"false"</span> <span class="attr">resizable</span>=<span class="string">"false"</span> <span class="attr">onload</span>=<span class="string">"onload()"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">player</span> <span class="attr">openstatechange</span>=<span class="string">"meta_update()"</span> <span class="attr">currentitemchange</span>=<span class="string">"meta_update()"</span> <span class="attr">currentPlaylistChange</span>=<span class="string">"meta_update()"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">returnbutton</span> <span class="attr">top</span>=<span class="string">"111"</span> <span class="attr">left</span>=<span class="string">"36"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"library.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">top</span>=<span class="string">"111"</span> <span class="attr">left</span>=<span class="string">"235"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"list.png"</span></div><div class="line">			<span class="attr">onclick</span>=<span class="string">"Jscript:list.visible=!list.visible"</span></div><div class="line">			<span class="attr">uptooltip</span>=<span class="string">"playlist"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">text</span> <span class="attr">top</span>=<span class="string">"117"</span> <span class="attr">left</span>=<span class="string">"132"</span> <span class="attr">id</span>=<span class="string">"pl_numer"</span></span></div><div class="line">			<span class="attr">foregroundcolor</span>=<span class="string">"#666666"</span></div><div class="line">			<span class="attr">fontStyle</span>=<span class="string">"bold"</span></div><div class="line">			<span class="attr">fontFace</span>=<span class="string">"メイリオ"</span></div><div class="line">			<span class="attr">fontSize</span>=<span class="string">"5"</span></div><div class="line">			<span class="attr">value</span>=<span class="string">"000"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">text</span> <span class="attr">top</span>=<span class="string">"117"</span> <span class="attr">left</span>=<span class="string">"160"</span> <span class="attr">id</span>=<span class="string">"pl_denom"</span></span></div><div class="line">			<span class="attr">foregroundcolor</span>=<span class="string">"#666666"</span></div><div class="line">			<span class="attr">fontStyle</span>=<span class="string">"bold"</span></div><div class="line">			<span class="attr">fontFace</span>=<span class="string">"メイリオ"</span></div><div class="line">			<span class="attr">fontSize</span>=<span class="string">"5"</span></div><div class="line">			<span class="attr">value</span>=<span class="string">"000"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">playbutton</span> <span class="attr">top</span>=<span class="string">"435"</span> <span class="attr">left</span>=<span class="string">"120"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"play.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">pausebutton</span> <span class="attr">top</span>=<span class="string">"435"</span> <span class="attr">left</span>=<span class="string">"120"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"pause.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">			<span class="attr">onClick</span>=<span class="string">"player.controls.pause();"</span></div><div class="line">			<span class="attr">visible</span>=<span class="string">"wmpenabled:player.controls.pause"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">prevbutton</span> <span class="attr">top</span>=<span class="string">"435"</span> <span class="attr">left</span>=<span class="string">"58"</span></span></div><div class="line"> 			<span class="attr">image</span>=<span class="string">"prev.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">nextbutton</span> <span class="attr">top</span>=<span class="string">"435"</span> <span class="attr">left</span>=<span class="string">"183"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"next.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">repeatbutton</span> <span class="attr">top</span>=<span class="string">"482"</span> <span class="attr">left</span>=<span class="string">"38"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"repeat.png"</span></div><div class="line">			<span class="attr">downimage</span>=<span class="string">"repeated.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">shufflebutton</span> <span class="attr">top</span>=<span class="string">"482"</span> <span class="attr">left</span>=<span class="string">"200"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"shuffle.png"</span></div><div class="line">			<span class="attr">downimage</span>=<span class="string">"shuffled.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">minimizebutton</span> <span class="attr">top</span>=<span class="string">"518"</span> <span class="attr">left</span>=<span class="string">"120"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"minimize.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">closebutton</span> <span class="attr">top</span>=<span class="string">"0"</span> <span class="attr">left</span>=<span class="string">"192"</span></span></div><div class="line">			<span class="attr">image</span>=<span class="string">"close.png"</span></div><div class="line">			<span class="attr">cursor</span>=<span class="string">"hand"</span></div><div class="line">			<span class="attr">transparencycolor</span>=<span class="string">"#FFFF00"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">tracknametext</span> <span class="attr">top</span>=<span class="string">"393"</span> <span class="attr">left</span>=<span class="string">"40"</span> <span class="attr">id</span>=<span class="string">"trackname"</span></span></div><div class="line">			<span class="attr">width</span>=<span class="string">"220"</span></div><div class="line">			<span class="attr">fontsize</span>=<span class="string">"7"</span></div><div class="line">			<span class="attr">foregroundcolor</span>=<span class="string">"black"</span></div><div class="line">			<span class="attr">backgroundcolor</span>=<span class="string">"transparent"</span></div><div class="line">			<span class="attr">scrolling</span>=<span class="string">"false"</span></div><div class="line">			<span class="attr">scrollingamount</span>=<span class="string">"3"</span></div><div class="line">			<span class="attr">justification</span>=<span class="string">"center"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">text</span> <span class="attr">top</span>=<span class="string">"415"</span> <span class="attr">left</span>=<span class="string">"40"</span> <span class="attr">id</span>=<span class="string">"author_text"</span></span></div><div class="line">			<span class="attr">width</span>=<span class="string">"220"</span></div><div class="line">			<span class="attr">fontsize</span>=<span class="string">"5"</span></div><div class="line">			<span class="attr">foregroundColor</span>=<span class="string">"darkslategray"</span></div><div class="line">			<span class="attr">fontStyle</span>=<span class="string">"regular"</span></div><div class="line">			<span class="attr">tabStop</span>=<span class="string">"false"</span></div><div class="line">			<span class="attr">justification</span>=<span class="string">"center"</span></div><div class="line">			<span class="attr">value</span>=<span class="string">"jscript:player.currentMedia.getItemInfo('Author');"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">volumeslider</span> <span class="attr">top</span>=<span class="string">"465"</span> <span class="attr">left</span>=<span class="string">"70"</span></span></div><div class="line">			<span class="attr">transparencycolor</span>=<span class="string">"#FFFF00"</span></div><div class="line">			<span class="attr">foregroundimage</span>=<span class="string">"vol_fore.png"</span></div><div class="line">			<span class="attr">backgroundimage</span>=<span class="string">"vol_back.png"</span></div><div class="line">			<span class="attr">thumbimage</span>=<span class="string">"vol_ball.png"</span></div><div class="line">			<span class="attr">bordersize</span>=<span class="string">"7"</span></div><div class="line">			<span class="attr">direction</span>=<span class="string">"horizontal"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">slider</span> <span class="attr">top</span>=<span class="string">"378"</span> <span class="attr">left</span>=<span class="string">"79"</span></span></div><div class="line">			<span class="attr">width</span>=<span class="string">"140"</span></div><div class="line">			<span class="attr">bordersize</span>=<span class="string">"1"</span></div><div class="line">			<span class="attr">transparencycolor</span>=<span class="string">"#FFFF00"</span></div><div class="line">			<span class="attr">slide</span>=<span class="string">"false"</span></div><div class="line">			<span class="attr">foregroundimage</span>=<span class="string">"seek_fore.png"</span></div><div class="line">			<span class="attr">backgroundimage</span>=<span class="string">"seek_back.png"</span></div><div class="line">			<span class="attr">thumbimage</span>=<span class="string">"seek_ball.png"</span></div><div class="line">			<span class="attr">direction</span>=<span class="string">"horizontal"</span></div><div class="line">			<span class="attr">min</span>=<span class="string">"0"</span></div><div class="line">			<span class="attr">max</span>=<span class="string">"wmpprop:player.currentmedia.duration"</span></div><div class="line">			<span class="attr">ondragend</span>=<span class="string">"player.controls.currentposition=value;"</span></div><div class="line">			<span class="attr">value</span>=<span class="string">"wmpprop:player.controls.currentposition"</span></div><div class="line">			<span class="attr">tooltip</span>=<span class="string">"seek"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">text</span> <span class="attr">top</span>=<span class="string">"379"</span> <span class="attr">left</span>=<span class="string">"40"</span></span></div><div class="line">			<span class="attr">width</span>=<span class="string">"30"</span></div><div class="line">			<span class="attr">fontFace</span>=<span class="string">"メイリオ"</span></div><div class="line">			<span class="attr">fontsize</span>=<span class="string">"5"</span></div><div class="line">			<span class="attr">foregroundcolor</span>=<span class="string">"dimgray"</span></div><div class="line">			<span class="attr">value</span>=<span class="string">"wmpprop:player.controls.currentPositionString"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">text</span> <span class="attr">top</span>=<span class="string">"379"</span> <span class="attr">left</span>=<span class="string">"230"</span></span></div><div class="line">			<span class="attr">width</span>=<span class="string">"30"</span></div><div class="line">			<span class="attr">fontSize</span>=<span class="string">"5"</span></div><div class="line">			<span class="attr">fontFace</span>=<span class="string">"メイリオ"</span></div><div class="line">			<span class="attr">foregroundcolor</span>=<span class="string">"dimgray"</span></div><div class="line">			<span class="attr">value</span>=<span class="string">"wmpprop:player.currentMedia.durationString"</span></div><div class="line">		/&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">subview</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">visible</span>=<span class="string">"false"</span> <span class="attr">top</span>=<span class="string">"140"</span> <span class="attr">left</span>=<span class="string">"35"</span> <span class="attr">backgroundcolor</span>=<span class="string">"none"</span> <span class="attr">onload</span>=<span class="string">"meta_update()"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">playlist</span> <span class="attr">top</span>=<span class="string">"0"</span> <span class="attr">left</span>=<span class="string">"0"</span></span></div><div class="line">				<span class="attr">width</span>=<span class="string">"232"</span></div><div class="line">				<span class="attr">height</span>=<span class="string">"232"</span></div><div class="line">				<span class="attr">itemPlayingColor</span>=<span class="string">"whitesmoke"</span></div><div class="line">				<span class="attr">itemPlayingBackgroundColor</span>=<span class="string">"gray"</span></div><div class="line">				<span class="attr">disableditemcolor</span>=<span class="string">"#808080"</span></div><div class="line">				<span class="attr">foregroundcolor</span>=<span class="string">"darkslategray"</span></div><div class="line">				<span class="attr">backgroundcolor</span>=<span class="string">"whitesmoke"</span></div><div class="line">				<span class="attr">dropdownvisible</span>=<span class="string">"false"</span></div><div class="line">				<span class="attr">columnsvisible</span>=<span class="string">"false"</span></div><div class="line">			/&gt;</div><div class="line">		<span class="tag">&lt;/<span class="name">subview</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">subview</span> <span class="attr">id</span>=<span class="string">"album_art_work"</span> <span class="attr">visible</span>=<span class="string">"true"</span> <span class="attr">top</span>=<span class="string">"140"</span> <span class="attr">left</span>=<span class="string">"35"</span> <span class="attr">backgroundImage</span>=<span class="string">"WMPImage_AlbumArtLarge"</span> <span class="attr">width</span>=<span class="string">"232"</span> <span class="attr">height</span>=<span class="string">"232"</span> <span class="attr">resizeBackgroundImage</span>=<span class="string">"true"</span> <span class="attr">passThrough</span>=<span class="string">"true"</span> <span class="attr">justification</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">subview</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">theme</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="lt-theme-gt"><a href="#lt-theme-gt" class="headerlink" title="&lt;theme&gt;:"></a>&lt;theme&gt;:</h4><p>テーマ全般に関するタグです。スキンのタイトル(スキンセレクターで表示される名前)、著作者表示、製作者に加えてJavaScriptのファイルを指定します。複数ある場合は;(セミコロン)で区切るようです。</p>
<h4 id="lt-view-gt"><a href="#lt-view-gt" class="headerlink" title="&lt;view&gt;:"></a>&lt;view&gt;:</h4><p>htmlでいうbodyタグといったところでしょうか。背景画像やその他表示に関する属性を記述できます。clipping colorで指定した色が透過されて描画されます。</p>
<h4 id="lt-subview-gt"><a href="#lt-subview-gt" class="headerlink" title="&lt;subview&gt;:"></a>&lt;subview&gt;:</h4><p>htmlでいうdiv(ここでhtml5信者に刺される)的なタグということにしておきましょう。</p>
<h4 id="lt-player-gt"><a href="#lt-player-gt" class="headerlink" title="&lt;player&gt;:"></a>&lt;player&gt;:</h4><p>プレイヤーのイベントハンドラをここで登録しました。各イベントの発生毎にmeta_upload関数が呼び出され、メタ情報が更新・再描画されます。</p>
<h4 id="lt-returnbutton-gt"><a href="#lt-returnbutton-gt" class="headerlink" title="&lt;returnbutton&gt;:"></a>&lt;returnbutton&gt;:</h4><p>WMPのライブラリ(何を言っているかわからないかもしれないが、恐らくほとんどの人が一度は見たことがあるはず)を表示するボタンを指定しています。</p>
<h4 id="lt-button-gt"><a href="#lt-button-gt" class="headerlink" title="&lt;button&gt;:"></a>&lt;button&gt;:</h4><p>ボタンです。今回はプレイリストを表示するようにonclickで意味付けをしたものが書いてあります。</p>
<h4 id="lt-text-gt"><a href="#lt-text-gt" class="headerlink" title="&lt;text&gt;:"></a>&lt;text&gt;:</h4><p>テキストです。idを指定して、javascriptで書き換えているものがいくつかあります。</p>
<h4 id="lt-playbutton-gt"><a href="#lt-playbutton-gt" class="headerlink" title="&lt;playbutton&gt;:"></a>&lt;playbutton&gt;:</h4><p>三角の再生開始ボタンです。</p>
<h4 id="lt-pausebutton-gt"><a href="#lt-pausebutton-gt" class="headerlink" title="&lt;pausebutton&gt;:"></a>&lt;pausebutton&gt;:</h4><p>一時停止ボタンです。</p>
<h4 id="lt-prevbutton-gt"><a href="#lt-prevbutton-gt" class="headerlink" title="&lt;prevbutton&gt;:"></a>&lt;prevbutton&gt;:</h4><p>曲を早戻ししそうな見た目をしていますが、プレイリストのひとつ前の曲へ移動するボタンです。</p>
<h4 id="lt-next-gt"><a href="#lt-next-gt" class="headerlink" title="&lt;next&gt;:"></a>&lt;next&gt;:</h4><p>prevbuttonの逆をするボタンです。</p>
<h4 id="lt-repeat-gt"><a href="#lt-repeat-gt" class="headerlink" title="&lt;repeat&gt;:"></a>&lt;repeat&gt;:</h4><p>プレイリスト内の曲をリピート再生するか指定するボタンです。</p>
<h4 id="lt-shuffle-gt"><a href="#lt-shuffle-gt" class="headerlink" title="&lt;shuffle&gt;:"></a>&lt;shuffle&gt;:</h4><p>プレイリスト内の曲を順番通りでなくランダムに再生するか指定するボタンです。</p>
<h4 id="lt-minimizebutton-gt"><a href="#lt-minimizebutton-gt" class="headerlink" title="&lt;minimizebutton&gt;:"></a>&lt;minimizebutton&gt;:</h4><p>スキン表示を最小化でタスクバーに隠すボタンです。</p>
<h4 id="lt-closebutton-gt"><a href="#lt-closebutton-gt" class="headerlink" title="&lt;closebutton&gt;:"></a>&lt;closebutton&gt;:</h4><p>閉じるボタンです。</p>
<h4 id="lt-tracknametext-gt"><a href="#lt-tracknametext-gt" class="headerlink" title="&lt;tracknametext&gt;:"></a>&lt;tracknametext&gt;:</h4><p>再生中の曲名を表示します。</p>
<h4 id="lt-volumeslider-gt"><a href="#lt-volumeslider-gt" class="headerlink" title="&lt;volumeslider&gt;:"></a>&lt;volumeslider&gt;:</h4><p>実際に動かす球(?)とボリューム出てます色バーと出てません色バーを画像で指定すると良い感じにボリュームバーが出来上がります。</p>
<h4 id="lt-slider-gt"><a href="#lt-slider-gt" class="headerlink" title="&lt;slider&gt;:"></a>&lt;slider&gt;:</h4><p>ボリュームバーのように3つ画像を用意・指定するとシークバーが描画されます。</p>
<h4 id="lt-playlist-gt"><a href="#lt-playlist-gt" class="headerlink" title="&lt;playlist&gt;:"></a>&lt;playlist&gt;:</h4><p>プレイリストに入っている曲を描画する領域です。</p>
<p>その他のタグや各タグに指定できる属性は<a href="https://msdn.microsoft.com/ja-jp/library/cc364944.aspx" target="_blank" rel="external">スキンプログラミングリファレンス</a>で確認できます。凝りたい方はこちらを一読されると良いと思います。</p>
<h2 id="JavaScriptの記述"><a href="#JavaScriptの記述" class="headerlink" title="JavaScriptの記述"></a>JavaScriptの記述</h2><p>JavaScriptでは再生中の曲が変わった時などに、メタ情報(アルバムアートワーク、作曲者、曲名…)の更新を行います。今回のコードは以下の様な感じです。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* When start up skin */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	meta_update();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Control about meta data(playlist, track) */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">meta_update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// related playlist</span></div><div class="line">	pl_denom.value = player.currentPlaylist.count;</div><div class="line">	pl_numer.value = getIdx();</div><div class="line"></div><div class="line">	<span class="comment">// update album art work</span></div><div class="line">	album_art_work.backgroundImage = <span class="string">"WMPImage_AlbumArtlarge"</span>;</div><div class="line"></div><div class="line">	<span class="comment">// update track author name text</span></div><div class="line">	author_text.value = player.currentMedia.getItemInfo(<span class="string">"author"</span>);</div><div class="line">	<span class="keyword">if</span> (author_text.value == <span class="string">""</span>) &#123;</div><div class="line">		author_text.value = <span class="string">"undefined"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Current media index */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIdx</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> pl = player.currentPlaylist;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pl.count; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (pl.item(i).name == trackname.value) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> i + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>meta_update関数はメタ情報を更新して、上のwmsファイルで指定したidの要素を書き換える処理をしています。getIdx関数はプレイリストの何番目の曲を再生しているのかというのを表示するために、今何番目が流れているのかを調べる関数です(リファレンスをぱっと見た感じそういうメンバをcurrentPlaylistオブジェクトに見つけられなかったので適当に書いたけど、本当にないのかよくわからず…)。これをwms内でイベントハンドラに登録する形で記述してあるのがわかると思います。重要なのは&lt;player&gt;に登録してある、currentItemChangeイベント等でしょう。これは曲が変わるときなどに発生するイベント(説明が雑)なので、ここでメタ情報を更新しておけば、良い感じなります。</p>
<h2 id="できたもの"><a href="#できたもの" class="headerlink" title="できたもの"></a>できたもの</h2><p><blockquote class="twitter-tweet tw-align-center" data-lang="ja"><p lang="ja" dir="ltr">windows media playerのスキン久々に作った <a href="https://t.co/c7zoSuJuh3" target="_blank" rel="external">pic.twitter.com/c7zoSuJuh3</a></p>&mdash; わっさん (@wassan128) <a href="https://twitter.com/wassan128/status/769130025765306368" target="_blank" rel="external">2016年8月26日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>昔作った時も思いましたが、結構情報が少ない印象です(リファレンス見ればだいたい解決しますが)。n年前に制作した時はどうやって情報を集めたかあんまり覚えていませんが、個人的には実際にあるスキンを解凍してソースを見てみるというのが一番手っ取り早いと思います(もちろん、作者がそれを許諾しているスキンで)。あとはcss書いたことがあるとfontSizeなどの属性が雰囲気でわかるので、書きやすいと思います。JavaScript部分もあんまり最初リファレンス読まずに書いていたので手探り状態で、CurrentItemChangeにたどり着くまで結構かかりました。<br>冒頭でも書いた当スキンの公開についてですが、<a href="http://www.apple.com/jp/legal/trademark/guidelinesfor3rdparties.html" target="_blank" rel="external">こちら</a>の著作権利用に関するガイドラインを見た限りは問題ないような気がするのですが、はっきりわからないので現在問い合わせメールの返答待ちをしています。はっきりし次第公開できれば良いなと思っています。ソースの方は問題ないと思うので、スキン作りの参考になれば幸いです。</p>
<h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><ul>
<li><a href="http://www.actzero.jp/developer/report-5069.html" target="_blank" rel="external">プレゼン資料にも使える！iPhone5s、iPhone5cの無料イラスト素材(http://www.actzero.jp/developer/report-5069.html)</a></li>
<li><a href="https://msdn.microsoft.com/ja-jp/library/cc364944.aspx" target="_blank" rel="external">スキンプログラミングリファレンス(https://msdn.microsoft.com/ja-jp/library/cc364944.aspx)</a></li>
<li><a href="http://niyodiary.cocolog-nifty.com/blog/2012/09/windows-media-p.html" target="_blank" rel="external">実用的なWindows Media Playerスキン - niyoな日記(http://niyodiary.cocolog-nifty.com/blog/2012/09/windows-media-p.html)</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd564034.aspx" target="_blank" rel="external">Player Object(https://msdn.microsoft.com/en-us/library/windows/desktop/dd564034.aspx)</a></li>
<li><a href="http://delphi.ktop.com.tw/board.php?tid=36662" target="_blank" rel="external">自製 Windows Media Player 面版(http://delphi.ktop.com.tw/board.php?tid=36662)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Windows Media Player(以下、WMP)はスキンを何らかの手段で入手して、自分の好きな見た目に変更することができます。もちろん自分で作ることもでき、xml/javascriptを用いて比較的簡単にできるので、やっていきます。僕はn年前にiphon…1ph0n3の4sをモデルにしたものを作ったことがあり、今回はそれをip..1ph0n3の5sモデルで作りなおそうと思います。なぜ6系ではないかというと僕の携帯が5sだからです(どうでもいい)。ちなみに作ったものはできればここでダウンロードできるようにしたいのですが、現在著作権利用(林檎社公式音楽再生アプリのスクショを使用しており、著作権利用ガイドラインを読んだ感じ大丈夫ではあると思うが念のため)に関する確認の途中なので、ダウンロードファイルの設置はそこら辺が明確になり次第ということにします。では、やっていきます。&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows media player" scheme="http://wassan128.github.io/blog/tags/windows-media-player/"/>
    
      <category term="javascript" scheme="http://wassan128.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VirusTotalでのファイルスキャン結果をRaspberry Piに喋ってもらう話</title>
    <link href="http://wassan128.github.io/blog/2016/08/24/"/>
    <id>http://wassan128.github.io/blog/2016/08/24/</id>
    <published>2016-08-24T07:47:59.000Z</published>
    <updated>2016-08-26T11:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="twitter-tweet tw-align-center" data-lang="ja"><p lang="ja" dir="ltr">喋るraspberry piです。 <a href="https://t.co/IF1PRYHnJy" target="_blank" rel="external">pic.twitter.com/IF1PRYHnJy</a></p>&mdash; わっさん (@wassan128) <a href="https://twitter.com/wassan128/status/768416472401969152" target="_blank" rel="external">2016年8月24日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>ふと、<a href="https://www.virustotal.com/ja/" target="_blank" rel="external">VirusTotal</a>でAPIが提供されていたことを思い出し、なんとなく叩こうという気持ちが高まったのがきっかけです。しかしただ触るだけでは面白く無いので、今回は帰ってきた結果を喋らせてみようかなと独り言を放ちました。すると、昔々某企業様から某イベントの某賞で頂いたRaspberry Pi(Model B)が仲間になりたそうな目でこちらを見てきたので、喋ってもらうことにしました。なお、プログラミング言語にはPythonを、音声合成には<a href="http://komeisugiura.jp/software/software_jp.html" target="_blank" rel="external">非モノローグ音声合成</a>を用いました。</p>
<a id="more"></a>
<h2 id="VirusTotal-APIについて"><a href="#VirusTotal-APIについて" class="headerlink" title="VirusTotal APIについて"></a>VirusTotal APIについて</h2><p>VirusTotalにファイルを投げると、50個くらいのウイルス対策ソフトでファイルをスキャンしてくれます。そのAPIを叩いていくということになりますが、提供されている機能は</p>
<ol>
<li>ファイルを投げる(スキャンキューに追加、スキャン実施。制限は4個/分。)</li>
<li>スキャン結果レポートの受信</li>
<li>過去にスキャンしたことのあるファイルの再スキャン</li>
</ol>
<p>と言った感じ(他にもあるので興味のある方は<a href="https://www.virustotal.com/ja/documentation/public-api" target="_blank" rel="external">公式ドキュメント</a>を読むと良いと思います)。レスポンスはJSON形式でくれるので、良い感じにパースしてやれば良いです。今回は1, 2を使ってファイルを投げる→結果をパースして喋らせることをやります。<br>基本的にはドキュメントに書いてあるとおりに通りにやったので、ハマりどころはほとんどありませんでした。</p>
<h2 id="ステップ1-ファイルを投げる"><a href="#ステップ1-ファイルを投げる" class="headerlink" title="ステップ1.ファイルを投げる"></a>ステップ1.ファイルを投げる</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>www.virustotal.com<span class="regexp">/vtapi/</span>v2<span class="regexp">/file/</span>scan</div></pre></td></tr></table></figure>
<p>にファイルを送ります。ドキュメントにも書いてありますが、multipart/form-dataを転送するコードを先人が用意してくださっているので、利用します。なお、httpsでリクエストするように先人のコードに手を加えておかないと、「Bad Request」と怒られてしまうのでここだけ気をつけます。<br>今回は先人のコードをクラス化してimportして利用しました。それ以外はほぼドキュメント通りです。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> postfile</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_bin</span><span class="params">(target)</span>:</span></div><div class="line">	pf = postfile.postfile()</div><div class="line">	host = <span class="string">"www.virustotal.com"</span></div><div class="line">	selector = <span class="string">"https://www.virustotal.com/vtapi/v2/file/scan"</span></div><div class="line">	fields = [(<span class="string">"apikey"</span>, APIKEY)]</div><div class="line">	file_to_send = open(target, <span class="string">"rb"</span>).read()</div><div class="line">	files = [(<span class="string">"file"</span>, target, file_to_send)]</div><div class="line">	sent = pf.post_multipart(host, selector, fields, files)</div><div class="line">	<span class="keyword">return</span> sent</div></pre></td></tr></table></figure></p>
<p>sentにはファイル送信に対するレスポンスが入ります。レスポンスは<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"scan_id"</span>: <span class="string">"SCAN\_HASH"</span>,</div><div class="line">	<span class="attr">"sha1"</span>: <span class="string">"SHA1_HASH"</span>,</div><div class="line">	<span class="attr">"resource"</span>: <span class="string">"RESOURCE_HASH"</span>,</div><div class="line">	<span class="attr">"response_code"</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">"sha256"</span>: <span class="string">"SHA256_HASH"</span>,</div><div class="line">	<span class="attr">"permalink"</span>: <span class="string">"PERMALINK"</span>,</div><div class="line">	 <span class="attr">"md5"</span>: <span class="string">"MD5_HASH"</span>,</div><div class="line">	 <span class="attr">"verbose_msg"</span>: <span class="string">"Scan request successfully queued, come back later for the report"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>という形式で、この中の<strong>“scan_id”</strong>キーに対応する値を使って結果レポートを取得していきます。帰ってきているJSONレスポンスのキー順序が若干ドキュメントに示されているものと前後しているのは気にしない方針でやっていきます(特に困らないので)。</p>
<h2 id="ステップ2-結果レポートの受信"><a href="#ステップ2-結果レポートの受信" class="headerlink" title="ステップ2.結果レポートの受信"></a>ステップ2.結果レポートの受信</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>www.virustotal.com<span class="regexp">/vtapi/</span>v2<span class="regexp">/file/</span>report</div></pre></td></tr></table></figure>
<p>に取得したスキャンIDを添えてリクエストを投げます。といっても送信後すぐにレポートが見られるわけではなくて、VirusTotalでのファイルスキャンにはある程度の時間(2~5分くらい?)を要します。ので、スキャンが完了してからレポートをパースするような設計にすれば良いです。スキャンが終了しているかどうかは、レスポンスJSON内の<strong>“response_code”</strong>で識別できます。このキーに対応する値が-2の時はまだスキャン中なので、その間は大人しく待ちます。今回は1待ち間隔を30秒にしましたが、本家では確か5秒に一回更新していたので、もう少し短くても良いかもわかりません。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_report</span><span class="params">(sent)</span>:</span></div><div class="line">	r = json.loads(sent)</div><div class="line">	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">		url = <span class="string">"https://www.virustotal.com/vtapi/v2/file/report"</span></div><div class="line">		parameters = &#123;</div><div class="line">			<span class="string">"resource"</span>: r[<span class="string">"scan_id"</span>], <span class="comment"># ここでscan_idを指定する</span></div><div class="line">			<span class="string">"apikey"</span>: APIKEY</div><div class="line">		&#125;</div><div class="line">		data = urllib.urlencode(parameters)</div><div class="line">		req = urllib2.Request(url, data)</div><div class="line">		res = urllib2.urlopen(req)</div><div class="line">		j = json.loads(res.read())</div><div class="line"></div><div class="line">		<span class="comment"># レスポンスコードが-2の間は気長に待つ心が大事です</span></div><div class="line">		<span class="keyword">if</span> j[<span class="string">"response_code"</span>] != <span class="number">-2</span>:</div><div class="line">			<span class="keyword">break</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">print</span> <span class="string">"still work..."</span></div><div class="line">			time.sleep(<span class="number">30</span>) <span class="comment"># 30秒後にもう一回リクエストを投げる(連投防止)</span></div><div class="line">	<span class="keyword">return</span> j</div></pre></td></tr></table></figure></p>
<h2 id="ステップ3-結果をパースして音声合成する"><a href="#ステップ3-結果をパースして音声合成する" class="headerlink" title="ステップ3. 結果をパースして音声合成する"></a>ステップ3. 結果をパースして音声合成する</h2><p>ここまでで検知結果のJSONが取得できているはずなので、結果を元に音声合成をします。音声合成の部分もサンプルコードとして提示されているものをそのまま使えば良いです(今回ほとんどコード書いてない!w)。base64エンコードされたwav音声が手に入ります。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">voice</span><span class="params">(message)</span>:</span></div><div class="line">	tts_url =<span class="string">"http://rospeex.ucri.jgn-x.jp/nauth_json/jsServices/VoiceTraSS"</span></div><div class="line">	tts_command = &#123;</div><div class="line">		<span class="string">"method"</span>:<span class="string">"speak"</span>,</div><div class="line">		<span class="string">"params"</span>: [</div><div class="line">			<span class="string">"1.1"</span>,</div><div class="line">			&#123;</div><div class="line">				<span class="string">"language"</span>: <span class="string">"ja"</span>,</div><div class="line">				<span class="string">"text"</span>: message,</div><div class="line">				<span class="string">"voiceType"</span>: <span class="string">"*"</span>,</div><div class="line">				<span class="string">"audioType"</span>: <span class="string">"audio/x-wav"</span>&#125;]&#125;</div><div class="line"></div><div class="line">	obj_command = json.dumps(tts_command)</div><div class="line">	req = urllib2.Request(tts_url, obj_command)</div><div class="line">	received = urllib2.urlopen(req).read()</div><div class="line">	 </div><div class="line">	obj_received = json.loads(received)</div><div class="line">	tmp = obj_received[<span class="string">'result'</span>][<span class="string">'audio'</span>]</div><div class="line">	speech = base64.decodestring(tmp.encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">	f = open (<span class="string">"out.wav"</span>,<span class="string">'wb'</span>)</div><div class="line">	f.write(speech)</div><div class="line">	f.close</div></pre></td></tr></table></figure></p>
<p>引数のmessageは<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># "positives"の値 =&gt; ウイルス対策ソフトによる陽性反応の数</span></div><div class="line"><span class="comment"># "total"の値 =&gt; ファイルスキャンを実施したウイルス対策ソフトの合計数</span></div><div class="line"><span class="keyword">if</span> result[<span class="string">"positives"</span>] &gt; <span class="number">0</span>:</div><div class="line">	voice(<span class="string">"%d個中%d個のウイルス対策ソフトがマルウェアと判定しました！"</span> % (result[<span class="string">"total"</span>], result[<span class="string">"positives"</span>]))</div><div class="line">	<span class="keyword">print</span> <span class="string">"malware detected."</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">	voice(<span class="string">"危険なソフトウェアではない可能性が高いと判定されました。"</span>)</div><div class="line">	<span class="keyword">print</span> <span class="string">"maybe it's benign."</span></div></pre></td></tr></table></figure></p>
<p>こんな感じで決めてやります。</p>
<h2 id="ステップ4-喋らせる"><a href="#ステップ4-喋らせる" class="headerlink" title="ステップ4. 喋らせる"></a>ステップ4. 喋らせる</h2><p>やっと喋らせるターンです。ステップ3でwavファイルが手に入っているので、雑ですが<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="built_in">os</span></div><div class="line"><span class="built_in">os</span>.system(<span class="string">"aplay out.wav"</span>)</div></pre></td></tr></table></figure></p>
<p>で再生してしまいます。aplayはCUI上で音声再生を行えるものです。やるだけ感が半端ないのですが、今回ラズパイが久々の起動だったからかrpi-update, apt-get update/upgrade周りが失敗したらしく、aplayやamixer, alsamixerといったツール群がすべて使用不能になり、やむなくraspbian OSの再インストール・設定を行いました(ここで一番時間溶かした)。OS再インストール後は普通に再生ができました。</p>
<h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回はRaspberr Piを長き封印から解き放ち、言葉を喋らせることをやりました。VirusTotal本家でファイルを投げてブラウザの画面が忙しく更新され、無機質なレポート(失礼)が表示されるのを待つよりも、待っている間のわくわく感が高まった感じがあります(※個人差が有ります)。ラズパイを採択した理由は本当になんとなくでしたが、今回使用したNICTの音声合成エンジンが元々ROS向けに開発されたもの(らしい)なので、せっかくだしPCではなくこれで、と言った理由がないわけでもないです。まあしかしラズパイの特徴を活かせているかと言われるとう～んという感じなので、個人的には今度はロボットとか作ってみたいです。</p>
<h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><ul>
<li><a href="https://www.virustotal.com/ja/documentation/public-api" target="_blank" rel="external">VirusTotal Public API v2.0(https://www.virustotal.com/ja/documentation/public-api)</a></li>
<li><a href="http://code.activestate.com/recipes/146306/" target="_blank" rel="external">Http client to POST using multipart/form-data (Python recipe)(http://code.activestate.com/recipes/146306/)</a></li>
<li><a href="http://qaoverflow.com/question/virus-total-api-bad-request-malformed-or-illegal-request/" target="_blank" rel="external">Virus Total API – Bad Request; Malformed or Illegal Request(http://qaoverflow.com/question/virus-total-api-bad-request-malformed-or-illegal-request/)</a></li>
<li><a href="http://linux.die.net/man/1/aplay" target="_blank" rel="external">aplay(1) - Linux man page(http://linux.die.net/man/1/aplay)</a></li>
<li><a href="http://komeisugiura.jp/software/software_jp.html" target="_blank" rel="external">KOMEI SUGIURA(非モノローグ音声合成)(http://komeisugiura.jp/software/software_jp.html)</a></li>
<li><a href="https://sites.google.com/site/semilleroadt/home/raspberry-pi" target="_blank" rel="external">Raspberry-Pi Enable Sound(https://sites.google.com/site/semilleroadt/home/raspberry-pi)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;喋るraspberry piです。 &lt;a href=&quot;https://t.co/IF1PRYHnJy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pic.twitter.com/IF1PRYHnJy&lt;/a&gt;&lt;/p&gt;&amp;mdash; わっさん (@wassan128) &lt;a href=&quot;https://twitter.com/wassan128/status/768416472401969152&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016年8月24日&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;ふと、&lt;a href=&quot;https://www.virustotal.com/ja/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VirusTotal&lt;/a&gt;でAPIが提供されていたことを思い出し、なんとなく叩こうという気持ちが高まったのがきっかけです。しかしただ触るだけでは面白く無いので、今回は帰ってきた結果を喋らせてみようかなと独り言を放ちました。すると、昔々某企業様から某イベントの某賞で頂いたRaspberry Pi(Model B)が仲間になりたそうな目でこちらを見てきたので、喋ってもらうことにしました。なお、プログラミング言語にはPythonを、音声合成には&lt;a href=&quot;http://komeisugiura.jp/software/software_jp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;非モノローグ音声合成&lt;/a&gt;を用いました。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
      <category term="malware" scheme="http://wassan128.github.io/blog/tags/malware/"/>
    
      <category term="raspberry pi" scheme="http://wassan128.github.io/blog/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>x64マシンでpy2exeを使ってx86バイナリを吐き出した話</title>
    <link href="http://wassan128.github.io/blog/2016/08/18/"/>
    <id>http://wassan128.github.io/blog/2016/08/18/</id>
    <published>2016-08-18T10:50:39.000Z</published>
    <updated>2016-08-18T13:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今回の記事-というかメモ"><a href="#今回の記事-というかメモ" class="headerlink" title="今回の記事(というかメモ)"></a>今回の記事(というかメモ)</h2><p>pythonのコードをバイナリにできるのは知っていたが、実際に使ったことはなかったのでやってみた。手元のマシンはx64、pythonもx64用しかなかったので、このままではx64バイナリしか吐けない。そこで今回はx64マシンに新たにx86用pythonをインストールし、pythonコードからバイナリを吐き出すユーティリティである「py2exe」(もちろんx86用)を導入してx86バイナリを出力させる。</p>
<a id="more"></a>
<h2 id="py2exe導入手順"><a href="#py2exe導入手順" class="headerlink" title="py2exe導入手順"></a>py2exe導入手順</h2><p>py2exeはpythonコードからWindows実行形式ファイル(以下、バイナリ)を出力するpythonのユーティリティである。導入にはインストーラを用いる。pipを使わない理由は、pipでインストールできるpy2exeはpython3対応のもののみだから(手元では現在python2.7を使用している)。<br>インストーラは<a href="https://sourceforge.net/projects/py2exe/files/py2exe/" target="_blank" rel="external">ここ</a>から入手する。適当なバージョンを選択し、ダウンロード、インストールを行う。この時、x64のpythonしかない環境でx86のpy2exeをインストールしようとすると、「Python version 2.x required, which was not found in the registry」という感じのエラーが出る。手元にはpython2.7(x64)しかインストールされていないため、レジストリの参照に失敗していると考えられる。これは<a href="https://www.python.org/download/releases/2.7/" target="_blank" rel="external">x86のpythonをダウンロード、インストール</a>することで解決する。バージョンは2.7で揃えた(特に意味は無いが)。ちゃんと見つかるとこんな感じの画面になる(図1)。あとは通常通りインストールを行えば良い。</p>
<img src="/blog/2016/08/18/py2exe_x86python_found.png" alt="py2exeインストール正常進行の途中画面" title="py2exeインストール正常進行の途中画面">
<h2 id="使ってみる"><a href="#使ってみる" class="headerlink" title="使ってみる"></a>使ってみる</h2><p>py2exeでバイナリを吐き出すには次の手順を踏む。</p>
<ol>
<li>バイナリにしたいpythonのコードを書く</li>
<li>setup.pyを書く</li>
<li>バイナリを出力</li>
</ol>
<p>(1)はそのまま。(2)のsetup.pyだが、py2exeではバイナリ出力のオプションなどをこのファイル内に記述しなければならない。具体的には、<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">import</span> py2exe</div><div class="line"></div><div class="line">option = &#123;</div><div class="line">        <span class="string">"compressed"</span>:	<span class="keyword">True</span>,</div><div class="line">        <span class="string">"optimize"</span>:	<span class="number">2</span>,</div><div class="line">        <span class="string">"bundle_files"</span>:	<span class="number">2</span></div><div class="line">&#125;</div><div class="line">setup(</div><div class="line">        options = &#123;</div><div class="line">                <span class="string">"py2exe"</span>:       option</div><div class="line">        &#125;,</div><div class="line">        console = [</div><div class="line">                &#123;<span class="string">"script"</span>:      <span class="string">"test.py"</span>&#125;</div><div class="line">        ],</div><div class="line">        zipfile = <span class="keyword">None</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>このように。「option」では出力圧縮の有無(compressed[True|False])、最適化の有無(optimize[0|1|2])、ランタイムDLLを含めるか(bundle_files[1|2])を指定できる。「console」では対象のpythonコードを指定する(test.pyの部分は適宜変更)。Zipファイルを生成する場合は「zipfile」にファイル名を指定する。他にも除外するDLLのオプション指定などができるらしいが、今回は試していない。<br>setup.pyの記述が終わったら(3)実行。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup<span class="selector-class">.py</span> py2exe</div></pre></td></tr></table></figure></p>
<p>これでdistディレクトリ内にバイナリが出力されているのが確認できるはずである。fileコマンドで確認してみると、<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file test<span class="selector-class">.exe</span></div><div class="line">test<span class="selector-class">.exe</span>: PE32 executable (console) Intel <span class="number">80386</span>, <span class="keyword">for</span> MS Windows</div></pre></td></tr></table></figure></p>
<p>x86バイナリが出力できている。<br>なお、zipfileがNoneの状態でbunfle_filesが1(ランタイムDLLを含める)だと、Runtime Errorが出てバイナリが生成できなかった。zipfileに適当なファイル名を指定するか、bundle_filesを2(含めない)として実行すればエラー自体は消えるがスタンドアロンのバイナリは出力できなかった。</p>
<h2 id="出力されたバイナリ"><a href="#出力されたバイナリ" class="headerlink" title="出力されたバイナリ"></a>出力されたバイナリ</h2><p>今回バイナリを出力したpythonコードは<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="builtin-name">print</span> <span class="string">"Hello, World!"</span></div></pre></td></tr></table></figure></p>
<p>これだけ。IDA Pro Free(x86バイナリを出力したかった理由の一つ)で開いてStringsタブを確認してみる。が、Hello, Worldの文字列は見当たらない。VM上のLinuxで<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strings test.<span class="keyword">exe</span> | <span class="keyword">grep</span> Hello</div></pre></td></tr></table></figure></p>
<p>を実行すると「Hello, World(」の文字が出力される。知識不足でなぜIDAのstringsでは確認できないのかわからなかった。</p>
<h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>ランタイムDLLを含めるオプションで実行したにも関わらずスタンドアロンバイナリを出力できなかった。x86バイナリになったことでIDA Pro Freeでファイルを開けたのは良かったものの、出力されたバイナリの構造が知識不足でよくわからず…。バイナリ力がまだまだ足りないので、これからも精進したい。py2exeでのバイナリ出力はこれから活用していくか正直まだわからないが、一つメモとして残しておきたかったので記事に残した。</p>
<h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><ul>
<li><a href="http://cocodrips.hateblo.jp/entry/2015/06/03/232419" target="_blank" rel="external">py2exeでPythonのスクリプトを実行ファイル(exe)にする【py2exe】</a></li>
<li><a href="http://code.activestate.com/lists/python-announce-list/9973/" target="_blank" rel="external">py2exe for Python 3 released</a></li>
<li><a href="http://www.python.jp/Zope/Zope/articles/tips/py2exe" target="_blank" rel="external">Python スクリプトからスタンドアロンのWindowsプログラムへの変換</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今回の記事-というかメモ&quot;&gt;&lt;a href=&quot;#今回の記事-というかメモ&quot; class=&quot;headerlink&quot; title=&quot;今回の記事(というかメモ)&quot;&gt;&lt;/a&gt;今回の記事(というかメモ)&lt;/h2&gt;&lt;p&gt;pythonのコードをバイナリにできるのは知っていたが、実際に使ったことはなかったのでやってみた。手元のマシンはx64、pythonもx64用しかなかったので、このままではx64バイナリしか吐けない。そこで今回はx64マシンに新たにx86用pythonをインストールし、pythonコードからバイナリを吐き出すユーティリティである「py2exe」(もちろんx86用)を導入してx86バイナリを出力させる。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>プレゼンへのコメントをリアルタイムにスライドの上に流す話</title>
    <link href="http://wassan128.github.io/blog/2016/06/25/"/>
    <id>http://wassan128.github.io/blog/2016/06/25/</id>
    <published>2016-06-25T11:16:02.000Z</published>
    <updated>2016-06-25T12:24:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="あらすじ"><a href="#あらすじ" class="headerlink" title="あらすじ"></a>あらすじ</h2><p>夏ですね、暑いですね。世間ではこの時期流しそうめんをやったりするのかもしれませんが、僕は手元にそうめんがないので、別の何かを流していきたいと思います。ということで、今回の記事は、プレゼンへのコメントをリアルタイムでスクリーンに流すツールを作って使ったメモです(某科目の学科紹介プレゼンにて使用)。</p>
<p>プレゼン中にコメントを流すというアイデア自体は、1年か2年の頃に見た弊学での「ちびLT」という勉強会(?)でとある先輩が開発・紹介していたものが元なので、オリジナルではないですが、自分でも作ってみたくなったのでやってみました。しかし、当時の先輩がどのように作ったのかわからなかったので、とりあえずいろいろ調べたり考えてやってみたので、その過程をメモします。ちなみに最終的にはComet(Python, JavaScript) on Adobe Airで良い感じにやりました。</p>
<a id="more"></a>
<h2 id="開発が始まるまでの流れ"><a href="#開発が始まるまでの流れ" class="headerlink" title="開発が始まるまでの流れ"></a>開発が始まるまでの流れ</h2><p>くどいようですが、やりたいことは「PowerPointプレゼンテーションのスライド上を、聴衆のコメントが流れていく」ということです。したがって、</p>
<ol>
<li>聴衆がコメントを打ち込む画面</li>
<li>コメントを画面上に流す何らかの仕組み</li>
</ol>
<p>の2つが必要になります。1については、ひとまず適当なwebアプリのページを作って、URLを黒板かスライドにでも書いてアクセスしてもらい、コメントを打ってもらえば良いか、という感じで後回しにし、2の方に先にとりかかりました。思いついた当初はだいぶ楽観的で、<br>「まあ、PowerPointだし、Excelみたいにマクロあるっしょ(おもむろにAlt + F11を押す)。ほらVBA書けるやん、良い感じにDOMのデータ取ってきてテキストオブジェクト作ってアニメーション当てれば行けるっしょ～」<br>と考えていた時期が僕にもありますた。実際、VBAではInternetExplorerを起動してDOMの操作もでき、さらにreadyState(サイトのロードステータス)を扱った処理もできるようでした(※1)。また、検索の途中で面白そうな資料も発見しました(※2、いつかVBAやらないといけなくなった時にまた見たい)。</p>
<h2 id="でもやっぱり"><a href="#でもやっぱり" class="headerlink" title="でもやっぱり?"></a>でもやっぱり?</h2><p>そうはいってもreadyStateはブラウザによって実装のされ方が違うらしく、その影響なのかVBAから使う際の良さみが浅い感じでした。また、開発期間もあまり長くない状況で使い慣れない言語を使うよりは”い つ も の”でどうにかしたい気持ちが強くなり、その方向へ転換してグーグリングを継続しました。というかPowerPoint VBAとExcel VBAで若干言語仕様が違って、PPT VBAの資料が圧倒的に少ないのがだいぶ辛かったです。さて、ここからようやく開発本編です(僕の記事は前置きというか無駄話が長いことであまりにも有名)。</p>
<h2 id="い-つ-も-の"><a href="#い-つ-も-の" class="headerlink" title="い つ も の"></a>い つ も の</h2><p>やっぱりWebベースで全部やりたくなるんですよ。その願いを叶えてくれたのが、「<strong>Adobe Air</strong>」でした。恥ずかしながら存在自体を今回の開発時まで知らず、「へーこんなのあるんだー」「Flashと何が違うんや…」「でもActionScriptで開発しないといけないんじゃないの…？」などいろいろ疑問がありました。実際はAir SDKをダウンロードすることで「HTML + JavaScript」で開発ができるので、VBAの沼にはまりかけた時に比べればだいぶ気は楽でした。後はやるだけ。<br>ただ当初WebSocketで通信できないかなと思ってたんですが、AirではWebSocketがサポートされておらず、独自のSocketAPIが…(※3)とあったので、今回はSocketを捨てて「Comet」方式で実装することにしました(逃げ)。以下の図は全体のイメージをまとめたものです。Cometでファイルの変更を監視し、変更差分を画面に投げます。</p>
<img src="/blog/2016/06/25/system_image.png" alt="ユーザーからのインプットが画面を流れるまで" title="ユーザーからのインプットが画面を流れるまで">
<h2 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h2><p>OS: Windows7<br>言語: Python(2.7.11) + JavaScript(jquery(v1.12.4))</p>
<h2 id="核となるコードを書く"><a href="#核となるコードを書く" class="headerlink" title="核となるコードを書く"></a>核となるコードを書く</h2><p>PHP+JSでのCometの実装(※4)を参考に、ファイルの差分をJSONで返すPythonのコード(こんなのしか思いつかなかったのでもっと良い書き方あったら教えて下さい)。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">prevLines = int(<span class="keyword">form</span>[<span class="string">"prev"</span>].value)</div><div class="line"><span class="keyword">while</span> True:</div><div class="line">	nowLines = <span class="built_in">sum</span>(1 <span class="keyword">for</span> <span class="keyword">line</span> <span class="keyword">in</span> <span class="keyword">open</span>(LOGFILE))</div><div class="line">	<span class="keyword">if</span> prevLines != nowLines:</div><div class="line">		<span class="keyword">ret</span> = []</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(0, nowLines - prevLines):</div><div class="line">			<span class="keyword">ret</span>.<span class="keyword">append</span>(linecache.getline(LOGFILE, nowLines - i))</div><div class="line">		<span class="keyword">break</span></div><div class="line">	time.<span class="keyword">sleep</span>(1)</div><div class="line"></div><div class="line">linecache.clearcache()</div><div class="line"><span class="keyword">print</span> json.dumps(&#123;<span class="string">"ret"</span>: <span class="keyword">ret</span>, <span class="string">"prev"</span>: nowLines&#125;)</div></pre></td></tr></table></figure></p>
<p>と、それを投げたり良い感じにするJS側のコード。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstFlag = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> prev = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cometCheck</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: <span class="string">"./cgi/comet.py?prev="</span> + prev,</div><div class="line">		<span class="attr">type</span>: <span class="string">"get"</span></div><div class="line">	&#125;)</div><div class="line">	.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(data);</div><div class="line">		prev = json.prev;</div><div class="line"></div><div class="line">		<span class="comment">//起動時にもログが読み込まれてくるが、それは表示しない</span></div><div class="line">		<span class="keyword">if</span> (firstFlag) &#123;</div><div class="line">			firstFlag = <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; (json.ret).length; i++) &#123;</div><div class="line">				nicoscreen.add(json.ret[i], <span class="string">"white"</span>, <span class="string">"48pt"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//do something</span></div><div class="line">	&#125;)</div><div class="line">	.always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		cometCheck();</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JSコード中のnicoscreen.add関数ですが、これはニコニココメント風にwebページの画面上にに文字を流すjqueryのプラグイン(※5)があったので拝借し、少し中身を改造して使わせていただきました。以下動作確認時のスクリーンショットです(左側が入力用のユーザーが見るページ、右側が拡張ディスプレイに表示したPowerPointスライドと、その上を流れるコメント)。</p>
<img src="/blog/2016/06/25/test.png" alt="実際に使った入力画面からのコメントが、画面を流れる様子を確認" title="実際に使った入力画面からのコメントが、画面を流れる様子を確認">
<h2 id="なにもないところを文字が流れているように見えるんだけど…？"><a href="#なにもないところを文字が流れているように見えるんだけど…？" class="headerlink" title="なにもないところを文字が流れているように見えるんだけど…？"></a>なにもないところを文字が流れているように見えるんだけど…？</h2><p>これについてはAdobe Airの力でして、Airのアプリを書く際はまずxmlを書くんですが、その中でウィンドウを透明にしたり、フルスクリーンモードをオンにしたりなど設定ができます。また、詳しくはHTML + JavaScript開発者用ドキュメント(※6)を読めばわかりますが、簡潔に言うとSDKにJSを拡張するJSが入っていて、そいつを読み込んでAir JSなコードを少し書くとAirアプリのウィンドウを最前面に配置したりできます。</p>
<h2 id="作ってみての感想など"><a href="#作ってみての感想など" class="headerlink" title="作ってみての感想など"></a>作ってみての感想など</h2><p>最初からVBAじゃなくてWebの方法にあたりをつければよかった(VBAでしばらくはまり、Webベースに切り替えてから2～3日で作ったので)です。まあでもこんな機会でもなければVBA(ましてやPowerPoint VBA)を触る機会がない(ような気がする)ので良い経験にはなったかな、と思うようにしてます。<br>実際に使ってみて受けが良かったのかは正直よくわかりませんが、コメント書き込んでもらえて良かったです(誰もPC開いてない or コメント書いてくれないケースを想像すると…())。今後このツールを使う機会があるかは謎ですが、同じようなことをしようと考える方の参考に少しでもなれれば幸いです。以上です。</p>
<h2 id="参考にさせていただいたサイト"><a href="#参考にさせていただいたサイト" class="headerlink" title="参考にさせていただいたサイト"></a>参考にさせていただいたサイト</h2><p>※1 <a href="http://www.vba-ie.net/" target="_blank" rel="external">VBAのIE制御入門 | IE操作の自動化</a><br>※2 <a href="http://www.slideshare.net/satoshiohya/vba-62341558" target="_blank" rel="external">こじらせVBA - SlideShare</a><br>※3 <a href="http://help.adobe.com/ja_JP/air/html/dev/WSb2ba3b1aad8a27b0-67c0013e126afbe6c4d-8000.html" target="_blank" rel="external">Adobe&#160;Flash&#160;Platform * AIR でサポートされていない WebKit の機能</a><br>※4 <a href="http://rewish.jp/blog/tech/php_with_jquery_comet" target="_blank" rel="external">PHPとjQueryでCometっぽいモノを実装する</a><br>※5 <a href="http://labs.r9game.com/nicoscreen/" target="_blank" rel="external">NicoScreen.js：画像や動画の上に、ニコニコ動画のような文字を流すことが出来るjqueryプラグイン</a><br>※6 <a href="http://help.adobe.com/ja_JP/air/html/dev/index.html" target="_blank" rel="external">Adobe Air用HTML開発ガイド</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;あらすじ&quot;&gt;&lt;a href=&quot;#あらすじ&quot; class=&quot;headerlink&quot; title=&quot;あらすじ&quot;&gt;&lt;/a&gt;あらすじ&lt;/h2&gt;&lt;p&gt;夏ですね、暑いですね。世間ではこの時期流しそうめんをやったりするのかもしれませんが、僕は手元にそうめんがないので、別の何かを流していきたいと思います。ということで、今回の記事は、プレゼンへのコメントをリアルタイムでスクリーンに流すツールを作って使ったメモです(某科目の学科紹介プレゼンにて使用)。&lt;/p&gt;
&lt;p&gt;プレゼン中にコメントを流すというアイデア自体は、1年か2年の頃に見た弊学での「ちびLT」という勉強会(?)でとある先輩が開発・紹介していたものが元なので、オリジナルではないですが、自分でも作ってみたくなったのでやってみました。しかし、当時の先輩がどのように作ったのかわからなかったので、とりあえずいろいろ調べたり考えてやってみたので、その過程をメモします。ちなみに最終的にはComet(Python, JavaScript) on Adobe Airで良い感じにやりました。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ピラミッドに遊びに行ったら野生の10000次正方数列が現れた話</title>
    <link href="http://wassan128.github.io/blog/2016/05/22/"/>
    <id>http://wassan128.github.io/blog/2016/05/22/</id>
    <published>2016-05-22T07:54:46.000Z</published>
    <updated>2016-05-22T09:58:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>高校5年生なので、HSCTF(High School CTF)に登録して参加してみました。というのはもちろん嘘で、実際は大学生枠(?)で参加してみたんですが、その中でも「Egyptian Tomb」という問題についてメモしておきたくなったので、ブログに備忘録的に書き残そうかと思いました。<br>ちなみにチーム制CTFで、最終的にはラボの同級生と先輩と僕という感じのチームでした。もっと貢献したかった(´・ω・｀)</p>
<h2 id="問題文の要約"><a href="#問題文の要約" class="headerlink" title="問題文の要約"></a>問題文の要約</h2><p>Keithさんという人がいて、エジプトに行きましたと。ピラミッドを見に。するとKeithさんはこんなパズルを見つけたそうです。</p>
<p>$$<br>\begin{pmatrix}<br>1 &amp; 2 \\ 3 &amp; 4<br>\end{pmatrix}<br>$$</p>
<p>このパズルの答えは「20」になるそうです。ほーん。と思ったあなたには良いものを上げましょう(おもむろに$ 10000 \times 10000 $の数列を投げつけられる)。ではどうぞ、解いてください！<br>ざっくりいうとこんな感じです。ここからいろいろ考えたり殴ったりするターンになります。</p>
<a id="more"></a>
<h2 id="このパズルは何か"><a href="#このパズルは何か" class="headerlink" title="このパズルは何か"></a>このパズルは何か</h2><p>このパズルは問題文によると「sum of all sums of subsquares」、つまり$ n \times n $の正方形の中の$ 1 \times 1, \cdots (n - 1) \times (n - 1), n \times n $までの全ての正方形(all subsquares)の中の数字の和を、足したものがパズルの答え、ということだそうです。上の例だと$ 1 \times 1 $の正方形が4つ、$ 2 \times 2 $の正方形が1つなので、</p>
<p>$$<br>1+2+3+4+(1+2+3+4)=20<br>$$</p>
<img src="/blog/2016/05/22/squares.png" alt="2×2の数列内には合計5個の正方形がある" title="2×2の数列内には合計5個の正方形がある">
<p>ということになります。解き方がわかったので、早速$ 10000 \times 10000 $の数列をこの方法で解いてみましょう!ところで、$ 2 \times 2 $の数列内には5個の正方形がありましたが、$ 10000 \times 10000 $だといったいいくつの正方形があるんですかね?$ n \times n $の数列内には</p>
<p>$$<br>\sum_{k=1}^{n}k^2<br>$$</p>
<p>個の正方形があるので、$ n=10000 $では</p>
<p>$$<br>\sum_{k=1}^{10000}k^2=1+2^2+3^2+\cdots+10000^2=333383335000<br>$$</p>
<p>個の正方形があることになります。たったの3000億個か～／(^o^)＼<br>…これを上の式みたいにのんびり解くと大変なことになりそうなので、他の解き方を考えます。</p>
<h2 id="考えてみる"><a href="#考えてみる" class="headerlink" title="考えてみる"></a>考えてみる</h2><p>上の式を見ると、数列の要素$ \{1, 2, 3, 4\} $がそれぞれ2回ずつたされていることに気づきます。つまり、</p>
<p>$$<br>1\times2+2\times2+3\times2+4\times2=20<br>$$</p>
<p>というように、「{各要素の値} $ \times $ {各要素が足される回数}の総和」で計算できると考えられます。今回問題は$ 10000 \times 10000 $なので、$ n \times n $の$ n $は偶数と考えた上で、各要素が足される回数を要素とした係数数列を考えると、$ 2 \times 2 $の場合は、</p>
<p>$$<br>\begin{pmatrix}<br>2 &amp; 2 \\ 2 &amp; 2<br>\end{pmatrix}<br>$$</p>
<p>となりました。同様に、$ 4 \times 4 $、$ 6 \times 6 $ではそれぞれ</p>
<p>$$<br>\begin{pmatrix}<br>4 &amp; 6 &amp; 6 &amp; 4 \\<br>6 &amp; 10 &amp; 10 &amp; 6 \\<br>6 &amp; 10 &amp; 10 &amp; 6 \\<br>4 &amp; 6 &amp; 6 &amp; 4 \\<br>\end{pmatrix},\quad<br>\begin{pmatrix}<br>6 &amp; 10 &amp; 12 &amp; 12 &amp; 10 &amp; 6 \\<br>10 &amp; 18 &amp; 22 &amp; 22 &amp; 18 &amp; 10 \\<br>12 &amp; 22 &amp; 28 &amp; 28 &amp; 22 &amp; 12 \\<br>12 &amp; 22 &amp; 28 &amp; 28 &amp; 22 &amp; 12 \\<br>10 &amp; 18 &amp; 22 &amp; 22 &amp; 18 &amp; 10 \\<br>6 &amp; 10 &amp; 12 &amp; 12 &amp; 10 &amp; 6 \\<br>\end{pmatrix}<br>$$</p>
<p>が係数数列となります。この値は何か計算をして出したわけではなくて、友人(@koreander2001)と「$ 1 \times 1 $の時は全て1回ずつ足されて、$ 2 \times 2 $の時は$ 1, 2, 2,…, 2, 1 $で…」というように数え上げてそれぞれ何回足されるか書き出してみたものです:-)<br>これを見ると、それぞれ図の赤い三角形部分の数字を求められればどうにか全ての要素を網羅できそうな気がしてきます。実際できるので、これを元に頑張って一般化します。<br><img src="/blog/2016/05/22/matrix_calc.png" alt="係数数列の全ての要素を求める必要はなく、赤い三角形の部分を求めて適用すれば良い" title="係数数列の全ての要素を求める必要はなく、赤い三角形の部分を求めて適用すれば良い"></p>
<p>例えば、$ n=6 $だった場合、$ \frac{n}{2} $ すなわち$ 3 \times 3 $ の、さらに右上三角地帯を計算すれば良く、係数数列の当該部分は<br>$$<br>\begin{Bmatrix}<br>\begin{pmatrix}<br>1 &amp; 1 &amp; 1 \\<br>  &amp; 1 &amp; 1 \\<br>  &amp;   &amp; 1 \\<br>\end{pmatrix}+<br>\begin{pmatrix}<br>1 &amp; 2 &amp; 2 \\<br>  &amp; 4 &amp; 4 \\<br>  &amp;   &amp; 4 \\<br>\end{pmatrix}+<br>\begin{pmatrix}<br>1 &amp; 2 &amp; 3\\<br>  &amp; 4 &amp; 6\\<br>  &amp;   &amp; 9\\<br>\end{pmatrix}<br>\end{Bmatrix}<br>\times2<br>$$</p>
<p>のように分解できます。それぞれ$ 1 \times 1 $、$ 2 \times 2 $、$ 3 \times 3 $数列で足される回数をカウントしたものです。$ \times2 $をする理由は、$ 1 \times 1 $行列の正方形の個数と$ 6 \times 6 $、$ 2 \times 2 $と$ 5 \times 5 $、$ 3 \times 3 $と$ 4 \times 4 $でそれぞれ足し合わせの回数が対応している、すなわち$ 1 \times 1 $～$ 3 \times 3 $で折り返しているので、全体の足し合わせの回数は$ 1 \times 1 $～$ \frac{n}{2} \times \frac{n}{2} $までの和を2倍すると導出できるためです。<br>実際に計算をして、上で示した$ 6 \times 6 $の係数数列の値と対応しているか確認しつつ一般式の立式を目指します。座標$ (m, l) $が$ (1, 1), (2, 1), (3, 1) $のときそれぞれ<br>$$<br>(1, 1) = (1+1+1) \times 2 = 6\\<br>(2, 1) = (1+2+2) \times 2 = 10\\<br>(3, 1) = (1+2+3) \times 2 = 12\\<br>$$<br>となります。同様に$ (2, 2), (3, 2) $では、<br>$$<br>(2, 2) = (1+4+4) \times 2 = 18\\<br>(3, 2) = (1+4+6) \times 2 = 22\\<br>$$<br>となり、$ (3, 3) $では、<br>$$<br>(3, 3) = (1+4+9) \times 2 = 28\\<br>$$<br>が求まります。<br>ここで、$ (3, 3) $の式が<br>$$<br>\sum_{k=1}^{3}k^2<br>$$<br>を含むことに気づきます。各座標にも、部分的に二乗の総和の式が当てはまっています。これらを利用して、例えば$ (m, 2) $での部分的な一般化を試します(実際は$ n=8 $なども試したほうが良い(というか試した)ですが、今回は記事が長くなりすぎるので、割愛します)。<br>$ (m, 2) $においては、$ 1+4 $までは共通しており、3項目で$ 2 \times m $が足されています。$ n=8, n=10 $などを試すとよりはっきりとわかりますが、これは次のような法則に従って足されています。<br>$$<br>(m, 2) = (1+4+6+8+\cdots+2m+\cdots+2m) \times 2<br>$$<br>同様に$ (m, 3) $での部分的な一般化を試すと、<br>$$<br>(m, 3) = (1+4+9+12+15+\cdots+3m+\cdots+3m) \times 3<br>$$<br>という法則が得られます。この式は3つのパートに分けることができ、1つ目のパートが「二乗の和」、2つ目のパートが「mの倍数の和 - 二乗の和との重複部」、3つ目が「$ \frac{n}{2}-m $個の$ l \times m $」です。つまり、$ (m, l) $においては<br>$$<br>(m, l) = \begin{Bmatrix}(1+4+9+\cdots+l^2)+l \times ((1+2+3+\cdots+m) - (1+2+3+\cdots+l))+(\frac{n}{2}- m) \times l \times m\end{Bmatrix} \times 2<br>$$</p>
<p>と表すことができ、これを記号を用いて整理すると、</p>
<p>$$<br>(m, l) = \sum_{i=1}^{l} i^2 + l \times (\sum_{j=1}^{m} j - \sum_{k=1}^{l} k) + lm \times (\frac{n}{2}- m)<br>$$<br>となり、さらにこれを2乗和の公式などを用いて展開して計算すると、</p>
<p>$$<br>(m, l) = \frac{l(l+1)(2l+1)}{6} + l(\frac{m(m+1)}{2} - \frac{l(l+1)}{2}) + lm(\frac{n}{2}-m)\\<br>= \frac{l}{3}((l+1)(2l+1) + 3(m(m+1) - l(l+1)+m(3n-6m))\\<br>= \frac{l}{3}(2l^2+3l+1+3m^2+3m-3l^2-3l+3mn-6m^2)\\<br>= \frac{l}{3}(3mn-l^2-3m^2+3m+1)\\<br>= lm(n-m+1)-\frac{l}{3}(l^2-1)\\<br>\therefore (m, l) = lm(n-m+1)-\frac{l}{3}(l^2-1)\\<br>(ただし、l \leq m)<br>$$</p>
<p>という一般式を得られました。</p>
<h2 id="プログラムにしてみる"><a href="#プログラムにしてみる" class="headerlink" title="プログラムにしてみる"></a>プログラムにしてみる</h2><p>今回はPythonで書いてみました。問題の$ 10000 \times 10000 $数列は「egypt.in」というファイルで与えられたので、それを読み込んで計算させます。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">N</span> = 10000</div><div class="line">def formula(<span class="keyword">l</span>, <span class="keyword">m</span>):</div><div class="line">	<span class="keyword">return</span> <span class="keyword">l</span> * <span class="keyword">m</span> * (<span class="keyword">N</span> - <span class="keyword">m</span> + 1) - (<span class="keyword">l</span> * (pow(<span class="keyword">l</span>, 2) - 1)) / 3</div><div class="line"></div><div class="line">def main():</div><div class="line">	# load <span class="keyword">input</span> <span class="built_in">matrix</span></div><div class="line">	data = [item[:-2].<span class="keyword">split</span>(<span class="string">" "</span>) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">open</span>(<span class="string">"egypt.in"</span>, <span class="string">"r"</span>)]</div><div class="line">	<span class="keyword">mat</span> = [[int(elm) <span class="keyword">for</span> elm <span class="keyword">in</span> v] <span class="keyword">for</span> v <span class="keyword">in</span> data]</div><div class="line"></div><div class="line">	# calc value</div><div class="line">	<span class="keyword">sum</span> = 0</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(0, <span class="keyword">N</span> / 2):</div><div class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(i, <span class="keyword">N</span> / 2):</div><div class="line">			coef = formula(i + 1, j + 1)</div><div class="line">			<span class="keyword">sum</span> += coef * (<span class="keyword">mat</span>[i][j] + <span class="keyword">mat</span>[i][<span class="keyword">N</span> - j - 1] + <span class="keyword">mat</span>[<span class="keyword">N</span> - i - 1][j] + <span class="keyword">mat</span>[<span class="keyword">N</span> - i - 1][<span class="keyword">N</span> - j - 1])</div><div class="line">			<span class="keyword">if</span> i != j:</div><div class="line">				<span class="keyword">sum</span> += coef * (<span class="keyword">mat</span>[j][i] + <span class="keyword">mat</span>[j][<span class="keyword">N</span> - i - 1] + <span class="keyword">mat</span>[<span class="keyword">N</span> - j - 1][i] + <span class="keyword">mat</span>[<span class="keyword">N</span> - j - 1][<span class="keyword">N</span> - i - 1])</div><div class="line"></div><div class="line">	# result</div><div class="line">	<span class="keyword">print</span> <span class="string">"result: %d"</span> % <span class="built_in">sum</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">	main()</div></pre></td></tr></table></figure>
<p>3分くらい待って出てきた答えがそのままFLAGでした。<br>この問題はAlgorithm: 300に分類されてました。</p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ul>
<li>解き方が良いかどうかはさておき、なかなか楽しかった(?)</li>
<li>@koreander2001が神だった(以前にもCTFではない時に共に数学を鈍器にしたことがあり、その時も楽しかったし神だった)</li>
<li>CTFもPythonもまだまだ未熟なので頑張ります</li>
</ul>
<p>以上です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;高校5年生なので、HSCTF(High School CTF)に登録して参加してみました。というのはもちろん嘘で、実際は大学生枠(?)で参加してみたんですが、その中でも「Egyptian Tomb」という問題についてメモしておきたくなったので、ブログに備忘録的に書き残そうかと思いました。&lt;br&gt;ちなみにチーム制CTFで、最終的にはラボの同級生と先輩と僕という感じのチームでした。もっと貢献したかった(´・ω・｀)&lt;/p&gt;
&lt;h2 id=&quot;問題文の要約&quot;&gt;&lt;a href=&quot;#問題文の要約&quot; class=&quot;headerlink&quot; title=&quot;問題文の要約&quot;&gt;&lt;/a&gt;問題文の要約&lt;/h2&gt;&lt;p&gt;Keithさんという人がいて、エジプトに行きましたと。ピラミッドを見に。するとKeithさんはこんなパズルを見つけたそうです。&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\begin{pmatrix}&lt;br&gt;1 &amp;amp; 2 \\ 3 &amp;amp; 4&lt;br&gt;\end{pmatrix}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;このパズルの答えは「20」になるそうです。ほーん。と思ったあなたには良いものを上げましょう(おもむろに$ 10000 \times 10000 $の数列を投げつけられる)。ではどうぞ、解いてください！&lt;br&gt;ざっくりいうとこんな感じです。ここからいろいろ考えたり殴ったりするターンになります。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://wassan128.github.io/blog/tags/ctf/"/>
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
      <category term="math" scheme="http://wassan128.github.io/blog/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>図書館が開いてるか教えてくれるだけのbotを作った話</title>
    <link href="http://wassan128.github.io/blog/2016/04/03/"/>
    <id>http://wassan128.github.io/blog/2016/04/03/</id>
    <published>2016-04-03T02:17:29.000Z</published>
    <updated>2016-04-03T05:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><img src="/blog/2016/04/03/siri.png" alt="”わかりて”" title="”わかりて”">
<p>時は2016年4月。人工知能が世の中で盛り上がりを見せる中、某O高専の学生は「図書館今日開いてたっけ」と思った時、お手元の人工知能に尋ねるわけにもいかず、通常は直接足を運ぶか、インターネット上に公開されている「開館カレンダー」を見ることで開館状況を確認する。しかしそのためだけにいちいちPCを起動し、n回のクリックを経てサイトにアクセスするのは面倒だ。もう少し気軽に開館状況を知ることができれば…。<br>するとそこへ一羽の青い鳥が颯爽と現れ、大丈夫さ、と呟く…。</p>
<blockquote>
<p>――そう、Twitterならね。</p>
</blockquote>
<p>ということで、今回はPythonの勉強も兼ねて、開館状況を知りたい日付をリプライすると、その日の開館状況を返してくれるだけのTwitterBotを作りました(なお現在(2016/4/3時点)は動作させていません)。</p>
<a id="more"></a>
<h2 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h2><p>OS: Windows7<br>言語: Python(2.7.11)</p>
<h2 id="開館状況の取得方法を検討する"><a href="#開館状況の取得方法を検討する" class="headerlink" title="開館状況の取得方法を検討する"></a>開館状況の取得方法を検討する</h2><p>開館カレンダーは画像に示すように、開館の状況によって日付の背景色を変える表示方法が採用されています。カレンダーはHTMLのtableタグで構成されており、日付がそれぞれtdタグ(セル)に収まっているようです。よって、任意の日付の開館状況を知りたければ、その日付のtdの背景色を取得・判定できれば良さそうです。</p>
<img src="/blog/2016/04/03/library_calendar.png" alt="開館カレンダーの見た目。開館状況と背景色の対応表も示されている。" title="開館カレンダーの見た目。開館状況と背景色の対応表も示されている。">
<h2 id="スクレイピングの方法を検討する"><a href="#スクレイピングの方法を検討する" class="headerlink" title="スクレイピングの方法を検討する"></a>スクレイピングの方法を検討する</h2><p>上記の通り、カレンダーはHTMLで構成されているため、その要素であるtdにアクセスするためにスクレイピングを行います。今回は、pythonでスクレイピングに使用できるライブラリ</p>
<ul>
<li>lxml(<a href="http://lxml.de/" target="_blank" rel="external">http://lxml.de/</a>)</li>
<li>BeautifulSoup4(<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a>)</li>
</ul>
<p>を試用しましたが、今回はBeautifulSoup4(以下bs4)を選択しました。bs4ではPure Python以外のHTMLパーサーが選択でき、試用の際にインストールしていたlxmlをパーサーとして選択することで、パース速度と、パース結果の正確性の向上が期待できそうです。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> lxml</div><div class="line">pip <span class="keyword">install</span> beautifulsoup4</div></pre></td></tr></table></figure></p>
<p>ここまでで、bs4のfindメソッド(<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find" target="_blank" rel="external">→doc</a>)を用いてtdタグに以下のようにアクセスできるようになりました。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 import BeautifulSoup</div><div class="line"><span class="comment"># 第1引数にHTMLのデータ(urllibなどで取得してくる)、第2引数でパーサーを指定</span></div><div class="line">soup = BeautifulSoup(HTML_DATA, <span class="string">"lxml"</span>)</div><div class="line"><span class="comment"># findメソッドを使用し、検索条件としてtdの値がDATEのものを探す</span></div><div class="line">td_data = soup.<span class="builtin-name">find</span>(<span class="string">"td"</span>, <span class="attribute">text</span>=DATE)</div></pre></td></tr></table></figure></p>
<p>また、スクレイピング等のテストで実際のURLにプログラムから何度もアクセスをかけているとそのうち怒られるような気がしたので、スクレイピングに関する全ての動作テストは、実際のカレンダーを模倣したHTMLファイルを作成し、localhost上で行いました。</p>
<h2 id="Twitterとの連携を行う方法を検討する"><a href="#Twitterとの連携を行う方法を検討する" class="headerlink" title="Twitterとの連携を行う方法を検討する"></a>Twitterとの連携を行う方法を検討する</h2><p>今回は定期的に呟くタイプのBot形式ではなく、StreamingAPIを使用してリプライに反応するような仕様にしました。特にStreamingAPIにこだわる理由はありませんでしたが、pythonでStreamingAPIを叩いたことがなかったので、やってみたかったという感じです。ライブラリには「<a href="https://pypi.python.org/pypi/twitter" target="_blank" rel="external">twitter(1.17.1)</a>」を使用しました。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> twitter</div></pre></td></tr></table></figure></p>
<p>Streamingへの接続方法は以下のとおりです。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> twitter import *</div><div class="line"><span class="comment"># OAuth認証用のキーを指定して認証情報を生成</span></div><div class="line">auth = OAuth(ACCESSTOKEN, ACCESSSECRET, CONSUMERKEY, CONSUMERSECRET)</div><div class="line"><span class="comment"># 接続</span></div><div class="line">stream = TwitterStream(<span class="attribute">auth</span>=auth, <span class="attribute">domain</span>=<span class="string">"userstream.twitter.com"</span>)</div></pre></td></tr></table></figure></p>
<p>反応の仕方は、<br>「@islibopen islib N」(Nは任意の日付)<br>というリプライを受け取ったら処理を実行し、結果をリプライする、という感じです。</p>
<h2 id="できたもの"><a href="#できたもの" class="headerlink" title="できたもの"></a>できたもの</h2><img src="/blog/2016/04/03/exec_test.png" alt="図書館が開いているか実際に聞いてみた。やってる事自体は難しくないので、ちゃんと動作している。" title="図書館が開いているか実際に聞いてみた。やってる事自体は難しくないので、ちゃんと動作している。">
<h2 id="Botの公開・運営について"><a href="#Botの公開・運営について" class="headerlink" title="Botの公開・運営について"></a>Botの公開・運営について</h2><p>未定です。</p>
<h2 id="作って思ったこととかまとめ"><a href="#作って思ったこととかまとめ" class="headerlink" title="作って思ったこととかまとめ"></a>作って思ったこととかまとめ</h2><ul>
<li>td内にstyle属性が直書きされてるタイプのHTMLだったので、ザルな正規表現で背景色が取得できた。</li>
<li>今回は当月分しか対応していないが、201n年n月(カレンダー登録状況に依存するため、限界あり)対応はパラメータを変更することで簡単に実現できる。しかしやっていいのか…。てかそもそも作って使うのだろうか(何かを悟る)。</li>
<li>開発用に新たにTwitterアカウントを作成したが、これまでにもいくつか開発用にアカウントを作成しており、今回ついに巷で噂のスパム確認(電話番号登録)を強いられた(なんとかなった)。</li>
<li><del>作った後に改めて思ったけどあんまり役に立たない(重要)。</del></li>
<li>カレンダーの正しいスペルは「calend a r」。「calend e r」ではない（重要）</li>
<li>今後のためにも、スクレイピング関連の法律ちゃんと知っておきたい。</li>
</ul>
<p>以上です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;img src=&quot;/blog/2016/04/03/siri.png&quot; alt=&quot;”わかりて”&quot; title=&quot;”わかりて”&quot;&gt;
&lt;p&gt;時は2016年4月。人工知能が世の中で盛り上がりを見せる中、某O高専の学生は「図書館今日開いてたっけ」と思った時、お手元の人工知能に尋ねるわけにもいかず、通常は直接足を運ぶか、インターネット上に公開されている「開館カレンダー」を見ることで開館状況を確認する。しかしそのためだけにいちいちPCを起動し、n回のクリックを経てサイトにアクセスするのは面倒だ。もう少し気軽に開館状況を知ることができれば…。&lt;br&gt;するとそこへ一羽の青い鳥が颯爽と現れ、大丈夫さ、と呟く…。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;――そう、Twitterならね。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ということで、今回はPythonの勉強も兼ねて、開館状況を知りたい日付をリプライすると、その日の開館状況を返してくれるだけのTwitterBotを作りました(なお現在(2016/4/3時点)は動作させていません)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wassan128.github.io/blog/tags/python/"/>
    
      <category term="twitter" scheme="http://wassan128.github.io/blog/tags/twitter/"/>
    
  </entry>
  
  <entry>
    <title>Hexoでの記事の追加とコメント機能について</title>
    <link href="http://wassan128.github.io/blog/2015/09/11/"/>
    <id>http://wassan128.github.io/blog/2015/09/11/</id>
    <published>2015-09-11T10:23:00.000Z</published>
    <updated>2015-09-11T14:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今回の記事について"><a href="#今回の記事について" class="headerlink" title="今回の記事について"></a>今回の記事について</h2><p>昨日書いた記事の中で、Hexoで新しい記事を作成するところについて触れていなかったので、その追記がてら、しれっと追加したコメント機能のところについて書き残しておきます。<br><a id="more"></a></p>
<h2 id="記事を追加する「へくそにゅー」"><a href="#記事を追加する「へくそにゅー」" class="headerlink" title="記事を追加する「へくそにゅー」"></a>記事を追加する「へくそにゅー」</h2><p>さて、「新しい記事を追加する」という作業は記事に書き忘れるほど<strong>とても簡単</strong>にできます。その作業とは、コマンドプロンプトで作業用フォルダ上まで行き、<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"ARTICLE_TITLE"</span></div></pre></td></tr></table></figure></p>
<p>とするだけです。簡単ですね…。このコマンドによって「作業用フォルダ &gt; source &gt; _posts」内に「ARTICLE_TITLE.md」というファイルが作成されます。ですので、あとはこの中にMarkdown形式で記事を書いていけばOKです。</p>
<h2 id="コメント機能"><a href="#コメント機能" class="headerlink" title="コメント機能"></a>コメント機能</h2><p>次に、コメント機能についてですが、Hexoのテーマによっては最初からコメント欄がついているものもあるみたいですが、このデフォルトのテーマ「landscape」にはついていませんでした。どうやってつけるのか調べていたら、「<a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a>」というディスカッションツール(?)を導入できることがわかりました。<br><img src="/blog/2015/09/11/disqus.png" alt="DISQUS" title="DISQUS"><br>まずDisqusの<a href="https://disqus.com/profile/signup/?next=https%3A%2F%2Fdisqus.com%2F" target="_blank" rel="external">アカウントを取得</a>、もしくは既存のSNSアカウントでログインします。今回僕はTwitterアカウントでログインしました。その後、歯車アイコンの中の「Add Disqus To Site」というメニューから登録したいサイトのURLとshortnameという項目を設定します。このshortnameという項目に指定したものは後で「_config.yml」に設定します。「Finish registration」というボタンを押して登録完了です。<br><img src="/blog/2015/09/11/disqus_site.png" alt="shortnameは覚えやすいものにした方がよいです" title="shortnameは覚えやすいものにした方がよいです"></p>
<p>あとはHexo側の設定をすればコメント欄が自動的に追加されます。Hexo側は手動で「_config.yml」の設定をするか以下のコマンドで<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo<span class="built_in"> config </span>disqus_shortname &#123;YOUR_SHORTNAME&#125;</div><div class="line">hexo --config themes/light/_config.yml<span class="built_in"> config </span>comment_provider disqus</div></pre></td></tr></table></figure></p>
<p>とすることで設定が完了します。これでコメント欄が使えるようになりました！<br><img src="/blog/2015/09/11/disqus_comment.png" alt="やせいの コメント欄 があらわれた!" title="やせいの コメント欄 があらわれた!"></p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は記事の追加方法とコメント欄の追加について書きました。どちらも簡単にできました。Disqusのようにプラグインを簡単に導入できるのもHexoの強みなんでしょうね。これからも良さげなプラグインがあったら入れてみたいと思います。</p>
<h2 id="参考にさせていただいたサイト"><a href="#参考にさせていただいたサイト" class="headerlink" title="参考にさせていただいたサイト"></a>参考にさせていただいたサイト</h2><ul>
<li><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！</a></li>
<li><a href="http://kazunorimiura.com/post/86205749581/tumblr%E3%81%ABdisqus%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%82%84%E8%A8%AD%E7%BD%AE%E6%96%B9%E6%B3%95%E3%81%AA%E3%81%A9" target="_blank" rel="external">TumblrにDisqusコメントを導入するメリットや設置方法など</a></li>
<li><a href="http://harasou.github.io/2015/05/05/hexo-%E3%81%AB-DISQUS-%E3%82%92%E8%BF%BD%E5%8A%A0/" target="_blank" rel="external">hexo に DISQUS を追加</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今回の記事について&quot;&gt;&lt;a href=&quot;#今回の記事について&quot; class=&quot;headerlink&quot; title=&quot;今回の記事について&quot;&gt;&lt;/a&gt;今回の記事について&lt;/h2&gt;&lt;p&gt;昨日書いた記事の中で、Hexoで新しい記事を作成するところについて触れていなかったので、その追記がてら、しれっと追加したコメント機能のところについて書き残しておきます。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
      <category term="disqus" scheme="http://wassan128.github.io/blog/tags/disqus/"/>
    
  </entry>
  
  <entry>
    <title>Hexoで生成したブログをGitHub Pagesで公開するまで</title>
    <link href="http://wassan128.github.io/blog/2015/09/10/"/>
    <id>http://wassan128.github.io/blog/2015/09/10/</id>
    <published>2015-09-10T14:26:24.000Z</published>
    <updated>2015-09-11T02:05:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>どうも、太鼓の達人(実機)をしばらくプレイしないうちに腕がなまってしまった太古の達人(?)わっさんです。さて、今回はこのブログを生成してGitHubを使って公開するまでの流れを書き残しておきたいと思います。</p>
<h2 id="要約-というか超雑な流れ"><a href="#要約-というか超雑な流れ" class="headerlink" title="要約(というか超雑な流れ)"></a>要約(というか超雑な流れ)</h2><p>長文になるので、今回の説明の大まかな流れを示します。</p>
<ol>
<li>Node.jsをインストール</li>
<li>Hexoをnpmでインストール</li>
<li>GitHubリポジトリを用意し、Git周りの設定を完了する</li>
<li>デプロイ&amp;確認</li>
</ol>
<a id="more"></a>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>Windows 7 Enterprise</li>
<li>Node.js(v0.12.7)</li>
<li>npm(v2.11.3)</li>
</ul>
<h2 id="Node-jsをインストール"><a href="#Node-jsをインストール" class="headerlink" title="Node.jsをインストール"></a>Node.jsをインストール</h2><p>Node.jsはサーバーサイドで使用できるJavaScriptの事で、従来フロントエンドで使用してきたJavaScriptをサーバーサイドで使おう、というものです。こちらのインストールはWindows環境ということで、インストーラを使って行いました(<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js 公式サイト</a>)。インストールが終わったら、コマンドプロンプトで<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">-v</span>   //v0.<span class="number">12.7</span></div><div class="line">npm -v   //<span class="number">2.11</span>.<span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>として確認を行いました。npmは、「Node Package Manager」の略称らしいです。その名の通り、Node.js関連のモジュールインストールなどで活躍してくれるに違いありません。今回も何回か使います。</p>
<h2 id="Hexoをインストール"><a href="#Hexoをインストール" class="headerlink" title="Hexoをインストール"></a>Hexoをインストール</h2><p>次に、ブログの生成ツールをインストールします。今回は、静的サイトジェネレーターの<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>を使ってブログ本体を生成します。こちらは、先ほど確認を行ったnpmを使ってインストールします。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-<span class="keyword">cli</span></div></pre></td></tr></table></figure></p>
<h2 id="Hexoを使ってみる"><a href="#Hexoを使ってみる" class="headerlink" title="Hexoを使ってみる"></a>Hexoを使ってみる</h2><p>Hexoでは、コマンドを打ち込むことでブログのひな形を生成したり、記事を作成したりしていきます。まずはひな形を作っていきます。作業用フォルダを生成する場所を決めたらコマンドプロンプトでその場所まで移動して、<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init FOLDER</span></div></pre></td></tr></table></figure></p>
<p>というコマンドを実行します。「FOLDER」の部分は、好きな名前にして実行してください(作業用フォルダ名になるだけです)。<br>次に、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> FOLDER</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>として、モジュールをインストールします。これだけでひな形の作成は完了です。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo s</span></div></pre></td></tr></table></figure></p>
<p>としてローカルサーバーを起動し、<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>にアクセスしてみましょう。宇宙感あふれるページが表示されているかと思います。</p>
<h2 id="生成したブログの編集"><a href="#生成したブログの編集" class="headerlink" title="生成したブログの編集"></a>生成したブログの編集</h2><p>ひな形を作れたのは良いですが、このままでは面白くありませんね。ここで生成したフォルダを見てみましょう。「_config.yml」というファイルがあると思いますが、この中身を編集することでブログの全般的な設定をすることが出来ます。<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">こちら</a>(Hexo公式ページ)を参考にしながら、ブログのタイトル等を編集していきます。それぞれhtmlに変換した際にmetaタグなどに反映されていきます。</p>
<p>そのほかにもいろいろとフォルダやらファイルがありますが、例えば「themes」というフォルダの中にブログのデザインに関するスタイラスのファイルなどが入っていますので、その辺を変更することで見た目を変えることが出来ます。</p>
<p>デフォルトの宇宙感あふれるテーマは「landscape」という名前ですが、ネット上に<a href="https://hexo.io/themes/" target="_blank" rel="external">テーマが多く存在</a>するので、好きに変更することもできます。僕はこのデフォルトのテーマを少しいじったものを使っています。</p>
<h2 id="GitHubをセットアップ"><a href="#GitHubをセットアップ" class="headerlink" title="GitHubをセットアップ"></a>GitHubをセットアップ</h2><p>まず<a href="https://github.com/" target="_blank" rel="external">GitHub</a>リポジトリを作成します。GitHub Pagesにブログを置くことももちろんできますが、今回僕はサブディレクトリに配置したかったので「blog」というリポジトリを作成しました。「gh-pages」ブランチを作成したら、お手元のGit Bash等を使ってsshキーをジェネレートしてGitHub側に登録しておきます。これでGitHubとマシンのひも付けができるので、GitHub側の準備は完了です。</p>
<p>(ちなみに僕はこの作業を忘れていたためにデプロイで躓きました…(´・ω・`))</p>
<h2 id="HexoからGitHubへデプロイ"><a href="#HexoからGitHubへデプロイ" class="headerlink" title="HexoからGitHubへデプロイ"></a>HexoからGitHubへデプロイ</h2><p>ここまで来たらいよいよデプロイです。先ほど編集した「_config.yml」を開き、<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">url:</span> <span class="string">'http://USER_ID.github.io/REPO_NAME/'</span></div><div class="line"><span class="string">root:</span> <span class="regexp">/REPO_NAME/</span></div></pre></td></tr></table></figure></p>
<p>というように先ほど作成したリポジトリ名を指定します。<br>しかし、このままだと「themes」内の「_config.yml」の内容が悪さをしてアーカイブなどのリンクがうまく生成されないので、ファイルの下の方に<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">theme_config:</span></div><div class="line"><span class="symbol">  menu:</span></div><div class="line"><span class="symbol">    Home:</span> /REPO_NAME</div><div class="line"><span class="symbol">    Archives:</span> /REPO_NAME/archives</div></pre></td></tr></table></figure></p>
<p>と記述しておきます。その後、<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: <span class="string">'git@github.com:USER_ID/REPO_NAME.git'</span></div><div class="line">  <span class="attribute">branch</span>: gh-pages</div></pre></td></tr></table></figure></p>
<p>といった形でデプロイ用の設定を記述します。では、デプロイしましょう！<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d -g</span></div></pre></td></tr></table></figure></p>
<p>「hexo d」コマンドでデプロイできますが、「-g」オプションを付加するとデプロイ前にhtmlなどを生成してくれます(生成の結果、作業用フォルダ内に「public」というフォルダが作られます)。</p>
<p>エラーが出なければ成功です！指定したURLにアクセスして、確認しましょう。</p>
<h2 id="まとめと今後の展望"><a href="#まとめと今後の展望" class="headerlink" title="まとめと今後の展望"></a>まとめと今後の展望</h2><p>今回は、Hexoを利用して生成したブログをGitHub Pagesに公開することを目的として作業を行いました。作業にあたって、いろんなサイトを参考にさせてもらいましたが、Windows環境でやって記事にしている方が少なかったので、少し苦労しました(Gitについてよく知らないことが一番の原因だとは思いますが)。</p>
<p>また、この記事はMarkdown形式で書いていますが、まだ書き方がよくわからないのでわかりにくいところや間違ってるところ等あればコメントで教えていただけると幸いです。ブログのテーマについてはファイルをいじることで簡単に変更でき、良さげなので、これからしばらく運営していこうと思います。</p>
<h2 id="参考にさせていただいたサイト"><a href="#参考にさせていただいたサイト" class="headerlink" title="参考にさせていただいたサイト"></a>参考にさせていただいたサイト</h2><ul>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo(公式サイト)</a></li>
<li><a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！</a></li>
<li><a href="http://pagent.github.io/2014/11/24/hexo-windows-deploy/" target="_blank" rel="external">WindowsでHexoを使う(deploy)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;どうも、太鼓の達人(実機)をしばらくプレイしないうちに腕がなまってしまった太古の達人(?)わっさんです。さて、今回はこのブログを生成してGitHubを使って公開するまでの流れを書き残しておきたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;要約-というか超雑な流れ&quot;&gt;&lt;a href=&quot;#要約-というか超雑な流れ&quot; class=&quot;headerlink&quot; title=&quot;要約(というか超雑な流れ)&quot;&gt;&lt;/a&gt;要約(というか超雑な流れ)&lt;/h2&gt;&lt;p&gt;長文になるので、今回の説明の大まかな流れを示します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Node.jsをインストール&lt;/li&gt;
&lt;li&gt;Hexoをnpmでインストール&lt;/li&gt;
&lt;li&gt;GitHubリポジトリを用意し、Git周りの設定を完了する&lt;/li&gt;
&lt;li&gt;デプロイ&amp;amp;確認&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
      <category term="Node.js" scheme="http://wassan128.github.io/blog/tags/Node-js/"/>
    
      <category term="git" scheme="http://wassan128.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ブログはじめました</title>
    <link href="http://wassan128.github.io/blog/2015/09/08/"/>
    <id>http://wassan128.github.io/blog/2015/09/08/</id>
    <published>2015-09-08T13:52:19.000Z</published>
    <updated>2015-09-11T02:05:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ようやくつくった"><a href="#ようやくつくった" class="headerlink" title="ようやくつくった"></a>ようやくつくった</h2><p>ずっと作る作るといって作ってなかったので、夏休みを利用してブログを作ることにしました。</p>
<h2 id="今回使ったもの"><a href="#今回使ったもの" class="headerlink" title="今回使ったもの"></a>今回使ったもの</h2><p>Hexo： 静的サイトジェネレーター<br>GitHub Pages: 置き場所</p>
<p>gitがまだよくわからないのでいろいろ躓いた…(´・ω・`)<br>かなり雑ですが、またいつか記事にしますので、今日はここまででさようなら。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ようやくつくった&quot;&gt;&lt;a href=&quot;#ようやくつくった&quot; class=&quot;headerlink&quot; title=&quot;ようやくつくった&quot;&gt;&lt;/a&gt;ようやくつくった&lt;/h2&gt;&lt;p&gt;ずっと作る作るといって作ってなかったので、夏休みを利用してブログを作ることにしました。&lt;/p
    
    </summary>
    
    
      <category term="hexo" scheme="http://wassan128.github.io/blog/tags/hexo/"/>
    
      <category term="git" scheme="http://wassan128.github.io/blog/tags/git/"/>
    
  </entry>
  
</feed>
